syntax = "proto3";
package cosmos_sdk.x.bank.v1;

import "third_party/proto/gogoproto/gogo.proto";
import "third_party/proto/cosmos-proto/cosmos.proto";
import "third_party/proto/google/api/annotations.proto";
import "types/types.proto";

option go_package = "github.com/cosmos/cosmos-sdk/x/bank/types";

// MsgSend - high level transaction of the coin module
message MsgSend {
  option (gogoproto.equal) = true;

  bytes from_address = 1 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress",
    (gogoproto.moretags) = "yaml:\"from_address\""
  ];
  bytes to_address = 2 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress",
    (gogoproto.moretags) = "yaml:\"to_address\""
  ];
  repeated cosmos_sdk.v1.Coin amount = 3
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
}

// Input models transaction input
message Input {
  option (gogoproto.equal) = true;

  bytes    address                  = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
  repeated cosmos_sdk.v1.Coin coins = 2
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
}

// Output models transaction outputs
message Output {
  option (gogoproto.equal) = true;

  bytes    address                  = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
  repeated cosmos_sdk.v1.Coin coins = 2
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
}

// MsgMultiSend - high level transaction of the coin module
message MsgMultiSend {
  option (gogoproto.equal) = true;

  repeated Input  inputs  = 1 [(gogoproto.nullable) = false];
  repeated Output outputs = 2 [(gogoproto.nullable) = false];
}

// Supply represents a struct that passively keeps track of the total supply
// amounts in the network.
message Supply {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_getters)  = false;
  option (gogoproto.goproto_stringer) = false;
  option (cosmos_proto.implements_interface) = "*github.com/cosmos/cosmos-sdk/x/bank/exported.SupplyI";

  repeated cosmos_sdk.v1.Coin total = 1
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
}

//
// Query
//

// Query provides defines the gRPC querier service
service QueryService {
  // QueryBalance queries the balance of a single coin for a single account
  rpc QueryBalance (QueryBalanceRequest) returns (QueryBalanceResponse) {
    option (google.api.http) = {
      get: "/cosmos_sdk/x/bank/v1/balance/{address}/{denom}"
    };
  }

  // QueryBalance queries the balance of all coins for a single account
  rpc QueryAllBalances (QueryAllBalancesRequest) returns (QueryAllBalancesResponse) {
    option (google.api.http) = {
      get: "/cosmos_sdk/x/bank/v1/balances/{address}"
    };
  }
}

// QueryBalanceParams defines the params for querying an account balance.
message QueryBalanceRequest {
  bytes address = 1 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"
  ];
  string denom = 2;
}

// QueryBalanceResponse is the response for the QueryBalance rpc method
message QueryBalanceResponse {
  cosmos_sdk.v1.Coin balance = 1;
}

// QueryAllBalancesParams defines the params for querying all account balances
message QueryAllBalancesRequest {
  bytes address = 1 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"
  ];
}

// QueryAllBalancesResponse is the response to the QueryAllBalances rpc method
message QueryAllBalancesResponse {
  repeated cosmos_sdk.v1.Coin balances = 1 [
    (gogoproto.nullable)     = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}
