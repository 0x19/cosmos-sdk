// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/core/channel/v1/event.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/x/ibc/core/02-client/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventChannelOpenInit is a typed event emitted on channel open init
type EventChannelOpenInit struct {
	PortId                string `protobuf:"bytes,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty" yaml:"port_id"`
	ChannelId             string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty" yaml:"channel_id"`
	CounterpartyPortId    string `protobuf:"bytes,3,opt,name=counterparty_port_id,json=counterpartyPortId,proto3" json:"counterparty_port_id,omitempty" yaml:"counterparty_port_id"`
	CounterpartyChannelId string `protobuf:"bytes,4,opt,name=counterparty_channel_id,json=counterpartyChannelId,proto3" json:"counterparty_channel_id,omitempty" yaml:"counterparty_channel_id"`
	ConnectionId          string `protobuf:"bytes,5,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty" yaml:"connection_id"`
}

func (m *EventChannelOpenInit) Reset()         { *m = EventChannelOpenInit{} }
func (m *EventChannelOpenInit) String() string { return proto.CompactTextString(m) }
func (*EventChannelOpenInit) ProtoMessage()    {}
func (*EventChannelOpenInit) Descriptor() ([]byte, []int) {
	return fileDescriptor_a989ebecceb60589, []int{0}
}
func (m *EventChannelOpenInit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventChannelOpenInit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventChannelOpenInit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventChannelOpenInit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventChannelOpenInit.Merge(m, src)
}
func (m *EventChannelOpenInit) XXX_Size() int {
	return m.Size()
}
func (m *EventChannelOpenInit) XXX_DiscardUnknown() {
	xxx_messageInfo_EventChannelOpenInit.DiscardUnknown(m)
}

var xxx_messageInfo_EventChannelOpenInit proto.InternalMessageInfo

func (m *EventChannelOpenInit) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

func (m *EventChannelOpenInit) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *EventChannelOpenInit) GetCounterpartyPortId() string {
	if m != nil {
		return m.CounterpartyPortId
	}
	return ""
}

func (m *EventChannelOpenInit) GetCounterpartyChannelId() string {
	if m != nil {
		return m.CounterpartyChannelId
	}
	return ""
}

func (m *EventChannelOpenInit) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

// EventChannelOpenTry is a typed event emitted on channel open try
type EventChannelOpenTry struct {
	PortId                string `protobuf:"bytes,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty" yaml:"port_id"`
	ChannelId             string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty" yaml:"channel_id"`
	CounterpartyPortId    string `protobuf:"bytes,3,opt,name=counterparty_port_id,json=counterpartyPortId,proto3" json:"counterparty_port_id,omitempty" yaml:"counterparty_port_id"`
	CounterpartyChannelId string `protobuf:"bytes,4,opt,name=counterparty_channel_id,json=counterpartyChannelId,proto3" json:"counterparty_channel_id,omitempty" yaml:"counterparty_channel_id"`
	ConnectionId          string `protobuf:"bytes,5,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty" yaml:"connection_id"`
}

func (m *EventChannelOpenTry) Reset()         { *m = EventChannelOpenTry{} }
func (m *EventChannelOpenTry) String() string { return proto.CompactTextString(m) }
func (*EventChannelOpenTry) ProtoMessage()    {}
func (*EventChannelOpenTry) Descriptor() ([]byte, []int) {
	return fileDescriptor_a989ebecceb60589, []int{1}
}
func (m *EventChannelOpenTry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventChannelOpenTry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventChannelOpenTry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventChannelOpenTry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventChannelOpenTry.Merge(m, src)
}
func (m *EventChannelOpenTry) XXX_Size() int {
	return m.Size()
}
func (m *EventChannelOpenTry) XXX_DiscardUnknown() {
	xxx_messageInfo_EventChannelOpenTry.DiscardUnknown(m)
}

var xxx_messageInfo_EventChannelOpenTry proto.InternalMessageInfo

func (m *EventChannelOpenTry) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

func (m *EventChannelOpenTry) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *EventChannelOpenTry) GetCounterpartyPortId() string {
	if m != nil {
		return m.CounterpartyPortId
	}
	return ""
}

func (m *EventChannelOpenTry) GetCounterpartyChannelId() string {
	if m != nil {
		return m.CounterpartyChannelId
	}
	return ""
}

func (m *EventChannelOpenTry) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

// EventChannelOpenAck is a typed event emitted on channel open acknowledgement
type EventChannelOpenAck struct {
	PortId                string `protobuf:"bytes,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty" yaml:"port_id"`
	ChannelId             string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty" yaml:"channel_id"`
	CounterpartyPortId    string `protobuf:"bytes,3,opt,name=counterparty_port_id,json=counterpartyPortId,proto3" json:"counterparty_port_id,omitempty" yaml:"counterparty_port_id"`
	CounterpartyChannelId string `protobuf:"bytes,4,opt,name=counterparty_channel_id,json=counterpartyChannelId,proto3" json:"counterparty_channel_id,omitempty" yaml:"counterparty_channel_id"`
	ConnectionId          string `protobuf:"bytes,5,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty" yaml:"connection_id"`
}

func (m *EventChannelOpenAck) Reset()         { *m = EventChannelOpenAck{} }
func (m *EventChannelOpenAck) String() string { return proto.CompactTextString(m) }
func (*EventChannelOpenAck) ProtoMessage()    {}
func (*EventChannelOpenAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_a989ebecceb60589, []int{2}
}
func (m *EventChannelOpenAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventChannelOpenAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventChannelOpenAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventChannelOpenAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventChannelOpenAck.Merge(m, src)
}
func (m *EventChannelOpenAck) XXX_Size() int {
	return m.Size()
}
func (m *EventChannelOpenAck) XXX_DiscardUnknown() {
	xxx_messageInfo_EventChannelOpenAck.DiscardUnknown(m)
}

var xxx_messageInfo_EventChannelOpenAck proto.InternalMessageInfo

func (m *EventChannelOpenAck) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

func (m *EventChannelOpenAck) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *EventChannelOpenAck) GetCounterpartyPortId() string {
	if m != nil {
		return m.CounterpartyPortId
	}
	return ""
}

func (m *EventChannelOpenAck) GetCounterpartyChannelId() string {
	if m != nil {
		return m.CounterpartyChannelId
	}
	return ""
}

func (m *EventChannelOpenAck) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

// EventChannelCloseInit is a typed event emitted on channel close init
type EventChannelCloseInit struct {
	PortId                string `protobuf:"bytes,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty" yaml:"port_id"`
	ChannelId             string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty" yaml:"channel_id"`
	CounterpartyPortId    string `protobuf:"bytes,3,opt,name=counterparty_port_id,json=counterpartyPortId,proto3" json:"counterparty_port_id,omitempty" yaml:"counterparty_port_id"`
	CounterpartyChannelId string `protobuf:"bytes,4,opt,name=counterparty_channel_id,json=counterpartyChannelId,proto3" json:"counterparty_channel_id,omitempty" yaml:"counterparty_channel_id"`
	ConnectionId          string `protobuf:"bytes,5,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty" yaml:"connection_id"`
}

func (m *EventChannelCloseInit) Reset()         { *m = EventChannelCloseInit{} }
func (m *EventChannelCloseInit) String() string { return proto.CompactTextString(m) }
func (*EventChannelCloseInit) ProtoMessage()    {}
func (*EventChannelCloseInit) Descriptor() ([]byte, []int) {
	return fileDescriptor_a989ebecceb60589, []int{3}
}
func (m *EventChannelCloseInit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventChannelCloseInit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventChannelCloseInit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventChannelCloseInit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventChannelCloseInit.Merge(m, src)
}
func (m *EventChannelCloseInit) XXX_Size() int {
	return m.Size()
}
func (m *EventChannelCloseInit) XXX_DiscardUnknown() {
	xxx_messageInfo_EventChannelCloseInit.DiscardUnknown(m)
}

var xxx_messageInfo_EventChannelCloseInit proto.InternalMessageInfo

func (m *EventChannelCloseInit) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

func (m *EventChannelCloseInit) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *EventChannelCloseInit) GetCounterpartyPortId() string {
	if m != nil {
		return m.CounterpartyPortId
	}
	return ""
}

func (m *EventChannelCloseInit) GetCounterpartyChannelId() string {
	if m != nil {
		return m.CounterpartyChannelId
	}
	return ""
}

func (m *EventChannelCloseInit) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

// EventChannelOpenConfirm is a typed event emitted on channel open confirm
type EventChannelOpenConfirm struct {
	PortId                string `protobuf:"bytes,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty" yaml:"port_id"`
	ChannelId             string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty" yaml:"channel_id"`
	CounterpartyPortId    string `protobuf:"bytes,3,opt,name=counterparty_port_id,json=counterpartyPortId,proto3" json:"counterparty_port_id,omitempty" yaml:"counterparty_port_id"`
	CounterpartyChannelId string `protobuf:"bytes,4,opt,name=counterparty_channel_id,json=counterpartyChannelId,proto3" json:"counterparty_channel_id,omitempty" yaml:"counterparty_channel_id"`
	ConnectionId          string `protobuf:"bytes,5,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty" yaml:"connection_id"`
}

func (m *EventChannelOpenConfirm) Reset()         { *m = EventChannelOpenConfirm{} }
func (m *EventChannelOpenConfirm) String() string { return proto.CompactTextString(m) }
func (*EventChannelOpenConfirm) ProtoMessage()    {}
func (*EventChannelOpenConfirm) Descriptor() ([]byte, []int) {
	return fileDescriptor_a989ebecceb60589, []int{4}
}
func (m *EventChannelOpenConfirm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventChannelOpenConfirm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventChannelOpenConfirm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventChannelOpenConfirm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventChannelOpenConfirm.Merge(m, src)
}
func (m *EventChannelOpenConfirm) XXX_Size() int {
	return m.Size()
}
func (m *EventChannelOpenConfirm) XXX_DiscardUnknown() {
	xxx_messageInfo_EventChannelOpenConfirm.DiscardUnknown(m)
}

var xxx_messageInfo_EventChannelOpenConfirm proto.InternalMessageInfo

func (m *EventChannelOpenConfirm) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

func (m *EventChannelOpenConfirm) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *EventChannelOpenConfirm) GetCounterpartyPortId() string {
	if m != nil {
		return m.CounterpartyPortId
	}
	return ""
}

func (m *EventChannelOpenConfirm) GetCounterpartyChannelId() string {
	if m != nil {
		return m.CounterpartyChannelId
	}
	return ""
}

func (m *EventChannelOpenConfirm) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

// EventChannelCloseConfirm is a typed event emitted on channel close confirm
type EventChannelCloseConfirm struct {
	PortId                string `protobuf:"bytes,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty" yaml:"port_id"`
	ChannelId             string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty" yaml:"channel_id"`
	CounterpartyPortId    string `protobuf:"bytes,3,opt,name=counterparty_port_id,json=counterpartyPortId,proto3" json:"counterparty_port_id,omitempty" yaml:"counterparty_port_id"`
	CounterpartyChannelId string `protobuf:"bytes,4,opt,name=counterparty_channel_id,json=counterpartyChannelId,proto3" json:"counterparty_channel_id,omitempty" yaml:"counterparty_channel_id"`
	ConnectionId          string `protobuf:"bytes,5,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty" yaml:"connection_id"`
}

func (m *EventChannelCloseConfirm) Reset()         { *m = EventChannelCloseConfirm{} }
func (m *EventChannelCloseConfirm) String() string { return proto.CompactTextString(m) }
func (*EventChannelCloseConfirm) ProtoMessage()    {}
func (*EventChannelCloseConfirm) Descriptor() ([]byte, []int) {
	return fileDescriptor_a989ebecceb60589, []int{5}
}
func (m *EventChannelCloseConfirm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventChannelCloseConfirm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventChannelCloseConfirm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventChannelCloseConfirm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventChannelCloseConfirm.Merge(m, src)
}
func (m *EventChannelCloseConfirm) XXX_Size() int {
	return m.Size()
}
func (m *EventChannelCloseConfirm) XXX_DiscardUnknown() {
	xxx_messageInfo_EventChannelCloseConfirm.DiscardUnknown(m)
}

var xxx_messageInfo_EventChannelCloseConfirm proto.InternalMessageInfo

func (m *EventChannelCloseConfirm) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

func (m *EventChannelCloseConfirm) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *EventChannelCloseConfirm) GetCounterpartyPortId() string {
	if m != nil {
		return m.CounterpartyPortId
	}
	return ""
}

func (m *EventChannelCloseConfirm) GetCounterpartyChannelId() string {
	if m != nil {
		return m.CounterpartyChannelId
	}
	return ""
}

func (m *EventChannelCloseConfirm) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

// EventChannelSendPacket is a typed event emitted when packet is sent
type EventChannelSendPacket struct {
	Data             []byte       `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	TimeoutHeight    types.Height `protobuf:"bytes,2,opt,name=timeout_height,json=timeoutHeight,proto3" json:"timeout_height" yaml:"timeout_height"`
	TimeoutTimestamp uint64       `protobuf:"varint,3,opt,name=timeout_timestamp,json=timeoutTimestamp,proto3" json:"timeout_timestamp,omitempty" yaml:"timeout_timestamp"`
	Sequence         uint64       `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	SrcPort          string       `protobuf:"bytes,5,opt,name=src_port,json=srcPort,proto3" json:"src_port,omitempty" yaml:"src_port"`
	SrcChannel       string       `protobuf:"bytes,6,opt,name=src_channel,json=srcChannel,proto3" json:"src_channel,omitempty" yaml:"src_channel"`
	DstPort          string       `protobuf:"bytes,7,opt,name=dst_port,json=dstPort,proto3" json:"dst_port,omitempty" yaml:"dst_port"`
	DstChannel       string       `protobuf:"bytes,8,opt,name=dst_channel,json=dstChannel,proto3" json:"dst_channel,omitempty" yaml:"dst_channel"`
	ChannelOrdering  Order        `protobuf:"varint,9,opt,name=channel_ordering,json=channelOrdering,proto3,enum=ibc.core.channel.v1.Order" json:"channel_ordering,omitempty" yaml:"channel_ordering"`
}

func (m *EventChannelSendPacket) Reset()         { *m = EventChannelSendPacket{} }
func (m *EventChannelSendPacket) String() string { return proto.CompactTextString(m) }
func (*EventChannelSendPacket) ProtoMessage()    {}
func (*EventChannelSendPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_a989ebecceb60589, []int{6}
}
func (m *EventChannelSendPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventChannelSendPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventChannelSendPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventChannelSendPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventChannelSendPacket.Merge(m, src)
}
func (m *EventChannelSendPacket) XXX_Size() int {
	return m.Size()
}
func (m *EventChannelSendPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_EventChannelSendPacket.DiscardUnknown(m)
}

var xxx_messageInfo_EventChannelSendPacket proto.InternalMessageInfo

func (m *EventChannelSendPacket) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *EventChannelSendPacket) GetTimeoutHeight() types.Height {
	if m != nil {
		return m.TimeoutHeight
	}
	return types.Height{}
}

func (m *EventChannelSendPacket) GetTimeoutTimestamp() uint64 {
	if m != nil {
		return m.TimeoutTimestamp
	}
	return 0
}

func (m *EventChannelSendPacket) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *EventChannelSendPacket) GetSrcPort() string {
	if m != nil {
		return m.SrcPort
	}
	return ""
}

func (m *EventChannelSendPacket) GetSrcChannel() string {
	if m != nil {
		return m.SrcChannel
	}
	return ""
}

func (m *EventChannelSendPacket) GetDstPort() string {
	if m != nil {
		return m.DstPort
	}
	return ""
}

func (m *EventChannelSendPacket) GetDstChannel() string {
	if m != nil {
		return m.DstChannel
	}
	return ""
}

func (m *EventChannelSendPacket) GetChannelOrdering() Order {
	if m != nil {
		return m.ChannelOrdering
	}
	return NONE
}

// EventChannelRecvPacket is a typed event emitted when packet is received in channel
type EventChannelRecvPacket struct {
	Data             []byte       `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	TimeoutHeight    types.Height `protobuf:"bytes,2,opt,name=timeout_height,json=timeoutHeight,proto3" json:"timeout_height" yaml:"timeout_height"`
	TimeoutTimestamp uint64       `protobuf:"varint,3,opt,name=timeout_timestamp,json=timeoutTimestamp,proto3" json:"timeout_timestamp,omitempty" yaml:"timeout_timestamp"`
	Sequence         uint64       `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	SrcPort          string       `protobuf:"bytes,5,opt,name=src_port,json=srcPort,proto3" json:"src_port,omitempty" yaml:"src_port"`
	SrcChannel       string       `protobuf:"bytes,6,opt,name=src_channel,json=srcChannel,proto3" json:"src_channel,omitempty" yaml:"src_channel"`
	DstPort          string       `protobuf:"bytes,7,opt,name=dst_port,json=dstPort,proto3" json:"dst_port,omitempty" yaml:"dst_port"`
	DstChannel       string       `protobuf:"bytes,8,opt,name=dst_channel,json=dstChannel,proto3" json:"dst_channel,omitempty" yaml:"dst_channel"`
	ChannelOrdering  Order        `protobuf:"varint,9,opt,name=channel_ordering,json=channelOrdering,proto3,enum=ibc.core.channel.v1.Order" json:"channel_ordering,omitempty" yaml:"channel_ordering"`
	Success          bool         `protobuf:"varint,10,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *EventChannelRecvPacket) Reset()         { *m = EventChannelRecvPacket{} }
func (m *EventChannelRecvPacket) String() string { return proto.CompactTextString(m) }
func (*EventChannelRecvPacket) ProtoMessage()    {}
func (*EventChannelRecvPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_a989ebecceb60589, []int{7}
}
func (m *EventChannelRecvPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventChannelRecvPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventChannelRecvPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventChannelRecvPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventChannelRecvPacket.Merge(m, src)
}
func (m *EventChannelRecvPacket) XXX_Size() int {
	return m.Size()
}
func (m *EventChannelRecvPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_EventChannelRecvPacket.DiscardUnknown(m)
}

var xxx_messageInfo_EventChannelRecvPacket proto.InternalMessageInfo

func (m *EventChannelRecvPacket) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *EventChannelRecvPacket) GetTimeoutHeight() types.Height {
	if m != nil {
		return m.TimeoutHeight
	}
	return types.Height{}
}

func (m *EventChannelRecvPacket) GetTimeoutTimestamp() uint64 {
	if m != nil {
		return m.TimeoutTimestamp
	}
	return 0
}

func (m *EventChannelRecvPacket) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *EventChannelRecvPacket) GetSrcPort() string {
	if m != nil {
		return m.SrcPort
	}
	return ""
}

func (m *EventChannelRecvPacket) GetSrcChannel() string {
	if m != nil {
		return m.SrcChannel
	}
	return ""
}

func (m *EventChannelRecvPacket) GetDstPort() string {
	if m != nil {
		return m.DstPort
	}
	return ""
}

func (m *EventChannelRecvPacket) GetDstChannel() string {
	if m != nil {
		return m.DstChannel
	}
	return ""
}

func (m *EventChannelRecvPacket) GetChannelOrdering() Order {
	if m != nil {
		return m.ChannelOrdering
	}
	return NONE
}

func (m *EventChannelRecvPacket) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// EventChannelWriteAck is a typed event emitted on write acknowledgement
type EventChannelWriteAck struct {
	Data             []byte       `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	TimeoutHeight    types.Height `protobuf:"bytes,2,opt,name=timeout_height,json=timeoutHeight,proto3" json:"timeout_height" yaml:"timeout_height"`
	TimeoutTimestamp uint64       `protobuf:"varint,3,opt,name=timeout_timestamp,json=timeoutTimestamp,proto3" json:"timeout_timestamp,omitempty" yaml:"timeout_timestamp"`
	Sequence         uint64       `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	SrcPort          string       `protobuf:"bytes,5,opt,name=src_port,json=srcPort,proto3" json:"src_port,omitempty" yaml:"src_port"`
	SrcChannel       string       `protobuf:"bytes,6,opt,name=src_channel,json=srcChannel,proto3" json:"src_channel,omitempty" yaml:"src_channel"`
	DstPort          string       `protobuf:"bytes,7,opt,name=dst_port,json=dstPort,proto3" json:"dst_port,omitempty" yaml:"dst_port"`
	DstChannel       string       `protobuf:"bytes,8,opt,name=dst_channel,json=dstChannel,proto3" json:"dst_channel,omitempty" yaml:"dst_channel"`
	Acknowledgement  []byte       `protobuf:"bytes,9,opt,name=acknowledgement,proto3" json:"acknowledgement,omitempty"`
}

func (m *EventChannelWriteAck) Reset()         { *m = EventChannelWriteAck{} }
func (m *EventChannelWriteAck) String() string { return proto.CompactTextString(m) }
func (*EventChannelWriteAck) ProtoMessage()    {}
func (*EventChannelWriteAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_a989ebecceb60589, []int{8}
}
func (m *EventChannelWriteAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventChannelWriteAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventChannelWriteAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventChannelWriteAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventChannelWriteAck.Merge(m, src)
}
func (m *EventChannelWriteAck) XXX_Size() int {
	return m.Size()
}
func (m *EventChannelWriteAck) XXX_DiscardUnknown() {
	xxx_messageInfo_EventChannelWriteAck.DiscardUnknown(m)
}

var xxx_messageInfo_EventChannelWriteAck proto.InternalMessageInfo

func (m *EventChannelWriteAck) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *EventChannelWriteAck) GetTimeoutHeight() types.Height {
	if m != nil {
		return m.TimeoutHeight
	}
	return types.Height{}
}

func (m *EventChannelWriteAck) GetTimeoutTimestamp() uint64 {
	if m != nil {
		return m.TimeoutTimestamp
	}
	return 0
}

func (m *EventChannelWriteAck) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *EventChannelWriteAck) GetSrcPort() string {
	if m != nil {
		return m.SrcPort
	}
	return ""
}

func (m *EventChannelWriteAck) GetSrcChannel() string {
	if m != nil {
		return m.SrcChannel
	}
	return ""
}

func (m *EventChannelWriteAck) GetDstPort() string {
	if m != nil {
		return m.DstPort
	}
	return ""
}

func (m *EventChannelWriteAck) GetDstChannel() string {
	if m != nil {
		return m.DstChannel
	}
	return ""
}

func (m *EventChannelWriteAck) GetAcknowledgement() []byte {
	if m != nil {
		return m.Acknowledgement
	}
	return nil
}

// EventChannelAckPacket is a typed event emitted when packet acknowledgement is executed
type EventChannelAckPacket struct {
	Data             []byte       `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	TimeoutHeight    types.Height `protobuf:"bytes,2,opt,name=timeout_height,json=timeoutHeight,proto3" json:"timeout_height" yaml:"timeout_height"`
	TimeoutTimestamp uint64       `protobuf:"varint,3,opt,name=timeout_timestamp,json=timeoutTimestamp,proto3" json:"timeout_timestamp,omitempty" yaml:"timeout_timestamp"`
	Sequence         uint64       `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	SrcPort          string       `protobuf:"bytes,5,opt,name=src_port,json=srcPort,proto3" json:"src_port,omitempty" yaml:"src_port"`
	SrcChannel       string       `protobuf:"bytes,6,opt,name=src_channel,json=srcChannel,proto3" json:"src_channel,omitempty" yaml:"src_channel"`
	DstPort          string       `protobuf:"bytes,7,opt,name=dst_port,json=dstPort,proto3" json:"dst_port,omitempty" yaml:"dst_port"`
	DstChannel       string       `protobuf:"bytes,8,opt,name=dst_channel,json=dstChannel,proto3" json:"dst_channel,omitempty" yaml:"dst_channel"`
	ChannelOrdering  Order        `protobuf:"varint,9,opt,name=channel_ordering,json=channelOrdering,proto3,enum=ibc.core.channel.v1.Order" json:"channel_ordering,omitempty" yaml:"channel_ordering"`
	Acknowledgement  []byte       `protobuf:"bytes,10,opt,name=acknowledgement,proto3" json:"acknowledgement,omitempty"`
}

func (m *EventChannelAckPacket) Reset()         { *m = EventChannelAckPacket{} }
func (m *EventChannelAckPacket) String() string { return proto.CompactTextString(m) }
func (*EventChannelAckPacket) ProtoMessage()    {}
func (*EventChannelAckPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_a989ebecceb60589, []int{9}
}
func (m *EventChannelAckPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventChannelAckPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventChannelAckPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventChannelAckPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventChannelAckPacket.Merge(m, src)
}
func (m *EventChannelAckPacket) XXX_Size() int {
	return m.Size()
}
func (m *EventChannelAckPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_EventChannelAckPacket.DiscardUnknown(m)
}

var xxx_messageInfo_EventChannelAckPacket proto.InternalMessageInfo

func (m *EventChannelAckPacket) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *EventChannelAckPacket) GetTimeoutHeight() types.Height {
	if m != nil {
		return m.TimeoutHeight
	}
	return types.Height{}
}

func (m *EventChannelAckPacket) GetTimeoutTimestamp() uint64 {
	if m != nil {
		return m.TimeoutTimestamp
	}
	return 0
}

func (m *EventChannelAckPacket) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *EventChannelAckPacket) GetSrcPort() string {
	if m != nil {
		return m.SrcPort
	}
	return ""
}

func (m *EventChannelAckPacket) GetSrcChannel() string {
	if m != nil {
		return m.SrcChannel
	}
	return ""
}

func (m *EventChannelAckPacket) GetDstPort() string {
	if m != nil {
		return m.DstPort
	}
	return ""
}

func (m *EventChannelAckPacket) GetDstChannel() string {
	if m != nil {
		return m.DstChannel
	}
	return ""
}

func (m *EventChannelAckPacket) GetChannelOrdering() Order {
	if m != nil {
		return m.ChannelOrdering
	}
	return NONE
}

func (m *EventChannelAckPacket) GetAcknowledgement() []byte {
	if m != nil {
		return m.Acknowledgement
	}
	return nil
}

// EventChannelTimeoutPacket is a typed event emitted when packet is timeout
type EventChannelTimeoutPacket struct {
	Data             []byte       `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	TimeoutHeight    types.Height `protobuf:"bytes,2,opt,name=timeout_height,json=timeoutHeight,proto3" json:"timeout_height" yaml:"timeout_height"`
	TimeoutTimestamp uint64       `protobuf:"varint,3,opt,name=timeout_timestamp,json=timeoutTimestamp,proto3" json:"timeout_timestamp,omitempty" yaml:"timeout_timestamp"`
	Sequence         uint64       `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	SrcPort          string       `protobuf:"bytes,5,opt,name=src_port,json=srcPort,proto3" json:"src_port,omitempty" yaml:"src_port"`
	SrcChannel       string       `protobuf:"bytes,6,opt,name=src_channel,json=srcChannel,proto3" json:"src_channel,omitempty" yaml:"src_channel"`
	DstPort          string       `protobuf:"bytes,7,opt,name=dst_port,json=dstPort,proto3" json:"dst_port,omitempty" yaml:"dst_port"`
	DstChannel       string       `protobuf:"bytes,8,opt,name=dst_channel,json=dstChannel,proto3" json:"dst_channel,omitempty" yaml:"dst_channel"`
	ChannelOrdering  Order        `protobuf:"varint,9,opt,name=channel_ordering,json=channelOrdering,proto3,enum=ibc.core.channel.v1.Order" json:"channel_ordering,omitempty" yaml:"channel_ordering"`
}

func (m *EventChannelTimeoutPacket) Reset()         { *m = EventChannelTimeoutPacket{} }
func (m *EventChannelTimeoutPacket) String() string { return proto.CompactTextString(m) }
func (*EventChannelTimeoutPacket) ProtoMessage()    {}
func (*EventChannelTimeoutPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_a989ebecceb60589, []int{10}
}
func (m *EventChannelTimeoutPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventChannelTimeoutPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventChannelTimeoutPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventChannelTimeoutPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventChannelTimeoutPacket.Merge(m, src)
}
func (m *EventChannelTimeoutPacket) XXX_Size() int {
	return m.Size()
}
func (m *EventChannelTimeoutPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_EventChannelTimeoutPacket.DiscardUnknown(m)
}

var xxx_messageInfo_EventChannelTimeoutPacket proto.InternalMessageInfo

func (m *EventChannelTimeoutPacket) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *EventChannelTimeoutPacket) GetTimeoutHeight() types.Height {
	if m != nil {
		return m.TimeoutHeight
	}
	return types.Height{}
}

func (m *EventChannelTimeoutPacket) GetTimeoutTimestamp() uint64 {
	if m != nil {
		return m.TimeoutTimestamp
	}
	return 0
}

func (m *EventChannelTimeoutPacket) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *EventChannelTimeoutPacket) GetSrcPort() string {
	if m != nil {
		return m.SrcPort
	}
	return ""
}

func (m *EventChannelTimeoutPacket) GetSrcChannel() string {
	if m != nil {
		return m.SrcChannel
	}
	return ""
}

func (m *EventChannelTimeoutPacket) GetDstPort() string {
	if m != nil {
		return m.DstPort
	}
	return ""
}

func (m *EventChannelTimeoutPacket) GetDstChannel() string {
	if m != nil {
		return m.DstChannel
	}
	return ""
}

func (m *EventChannelTimeoutPacket) GetChannelOrdering() Order {
	if m != nil {
		return m.ChannelOrdering
	}
	return NONE
}

// EventAcknowledgementSuccess is a typed event emitted on packet acknowledgement success
type EventAcknowledgementSuccess struct {
	Success []byte `protobuf:"bytes,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *EventAcknowledgementSuccess) Reset()         { *m = EventAcknowledgementSuccess{} }
func (m *EventAcknowledgementSuccess) String() string { return proto.CompactTextString(m) }
func (*EventAcknowledgementSuccess) ProtoMessage()    {}
func (*EventAcknowledgementSuccess) Descriptor() ([]byte, []int) {
	return fileDescriptor_a989ebecceb60589, []int{11}
}
func (m *EventAcknowledgementSuccess) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAcknowledgementSuccess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAcknowledgementSuccess.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAcknowledgementSuccess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAcknowledgementSuccess.Merge(m, src)
}
func (m *EventAcknowledgementSuccess) XXX_Size() int {
	return m.Size()
}
func (m *EventAcknowledgementSuccess) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAcknowledgementSuccess.DiscardUnknown(m)
}

var xxx_messageInfo_EventAcknowledgementSuccess proto.InternalMessageInfo

func (m *EventAcknowledgementSuccess) GetSuccess() []byte {
	if m != nil {
		return m.Success
	}
	return nil
}

// EventAcknowledgementError is a typed event emitted on packet acknowledgement error
type EventAcknowledgementError struct {
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *EventAcknowledgementError) Reset()         { *m = EventAcknowledgementError{} }
func (m *EventAcknowledgementError) String() string { return proto.CompactTextString(m) }
func (*EventAcknowledgementError) ProtoMessage()    {}
func (*EventAcknowledgementError) Descriptor() ([]byte, []int) {
	return fileDescriptor_a989ebecceb60589, []int{12}
}
func (m *EventAcknowledgementError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAcknowledgementError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAcknowledgementError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAcknowledgementError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAcknowledgementError.Merge(m, src)
}
func (m *EventAcknowledgementError) XXX_Size() int {
	return m.Size()
}
func (m *EventAcknowledgementError) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAcknowledgementError.DiscardUnknown(m)
}

var xxx_messageInfo_EventAcknowledgementError proto.InternalMessageInfo

func (m *EventAcknowledgementError) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*EventChannelOpenInit)(nil), "ibc.core.channel.v1.EventChannelOpenInit")
	proto.RegisterType((*EventChannelOpenTry)(nil), "ibc.core.channel.v1.EventChannelOpenTry")
	proto.RegisterType((*EventChannelOpenAck)(nil), "ibc.core.channel.v1.EventChannelOpenAck")
	proto.RegisterType((*EventChannelCloseInit)(nil), "ibc.core.channel.v1.EventChannelCloseInit")
	proto.RegisterType((*EventChannelOpenConfirm)(nil), "ibc.core.channel.v1.EventChannelOpenConfirm")
	proto.RegisterType((*EventChannelCloseConfirm)(nil), "ibc.core.channel.v1.EventChannelCloseConfirm")
	proto.RegisterType((*EventChannelSendPacket)(nil), "ibc.core.channel.v1.EventChannelSendPacket")
	proto.RegisterType((*EventChannelRecvPacket)(nil), "ibc.core.channel.v1.EventChannelRecvPacket")
	proto.RegisterType((*EventChannelWriteAck)(nil), "ibc.core.channel.v1.EventChannelWriteAck")
	proto.RegisterType((*EventChannelAckPacket)(nil), "ibc.core.channel.v1.EventChannelAckPacket")
	proto.RegisterType((*EventChannelTimeoutPacket)(nil), "ibc.core.channel.v1.EventChannelTimeoutPacket")
	proto.RegisterType((*EventAcknowledgementSuccess)(nil), "ibc.core.channel.v1.EventAcknowledgementSuccess")
	proto.RegisterType((*EventAcknowledgementError)(nil), "ibc.core.channel.v1.EventAcknowledgementError")
}

func init() { proto.RegisterFile("ibc/core/channel/v1/event.proto", fileDescriptor_a989ebecceb60589) }

var fileDescriptor_a989ebecceb60589 = []byte{
	// 833 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0x41, 0x6f, 0xe3, 0x44,
	0x14, 0x4e, 0xb2, 0xd9, 0x26, 0x9d, 0xed, 0xb6, 0xbb, 0xd3, 0x64, 0x6b, 0x52, 0x88, 0xcb, 0x9c,
	0x22, 0xa1, 0xb5, 0x09, 0xac, 0xb4, 0x08, 0x89, 0x43, 0x13, 0xad, 0x44, 0x4e, 0x5d, 0xa6, 0x95,
	0x90, 0x7a, 0x29, 0xce, 0x78, 0x48, 0xac, 0x24, 0x33, 0x61, 0x66, 0x12, 0xc8, 0xbf, 0xe0, 0x7f,
	0x20, 0xf1, 0x2f, 0x90, 0x7a, 0xec, 0x81, 0x03, 0x27, 0x0b, 0xb5, 0x12, 0x20, 0x38, 0x20, 0xf9,
	0x17, 0x20, 0x8f, 0xed, 0xc4, 0x0e, 0x3e, 0xb6, 0x48, 0x48, 0x3e, 0x65, 0xe6, 0xbd, 0xef, 0xbd,
	0x37, 0xfa, 0xde, 0x97, 0xf1, 0xb3, 0x81, 0xe9, 0x0d, 0x89, 0x4d, 0xb8, 0xa0, 0x36, 0x19, 0x3b,
	0x8c, 0xd1, 0xa9, 0xbd, 0xec, 0xda, 0x74, 0x49, 0x99, 0xb2, 0xe6, 0x82, 0x2b, 0x0e, 0x0f, 0xbd,
	0x21, 0xb1, 0x42, 0x80, 0x15, 0x03, 0xac, 0x65, 0xb7, 0xf5, 0x7e, 0x5e, 0x54, 0xe2, 0xd7, 0x71,
	0xad, 0xc6, 0x88, 0x8f, 0xb8, 0x5e, 0xda, 0xe1, 0x2a, 0xb6, 0xa6, 0xca, 0x4d, 0x3d, 0xca, 0x94,
	0x8e, 0xd3, 0xab, 0x08, 0x80, 0x7e, 0xaf, 0x80, 0xc6, 0x9b, 0xb0, 0x7c, 0x3f, 0xca, 0x76, 0x36,
	0xa7, 0x6c, 0xc0, 0x3c, 0x05, 0x3f, 0x00, 0xb5, 0x39, 0x17, 0xea, 0xca, 0x73, 0x8d, 0xf2, 0x49,
	0xb9, 0xb3, 0xdb, 0x83, 0x81, 0x6f, 0xee, 0xaf, 0x9c, 0xd9, 0xf4, 0x53, 0x14, 0x3b, 0x10, 0xde,
	0x09, 0x57, 0x03, 0x17, 0xbe, 0x02, 0x20, 0x3e, 0x4d, 0x88, 0xaf, 0x68, 0x7c, 0x33, 0xf0, 0xcd,
	0xe7, 0x11, 0x7e, 0xe3, 0x43, 0x78, 0x37, 0xde, 0x0c, 0x5c, 0xf8, 0x05, 0x68, 0x10, 0xbe, 0x60,
	0x8a, 0x8a, 0xb9, 0x23, 0xd4, 0xea, 0x2a, 0xa9, 0xf7, 0x48, 0xc7, 0x9b, 0x81, 0x6f, 0x1e, 0xc7,
	0xf1, 0x39, 0x28, 0x84, 0x61, 0xda, 0xfc, 0x36, 0x3a, 0xc8, 0x25, 0x38, 0xca, 0x80, 0x53, 0xa7,
	0xaa, 0xea, 0xac, 0x28, 0xf0, 0xcd, 0x76, 0x4e, 0xd6, 0xf4, 0x11, 0x9b, 0x69, 0x4f, 0x7f, 0x7d,
	0xdc, 0xcf, 0xc0, 0x53, 0xc2, 0x19, 0xa3, 0x44, 0x79, 0x9c, 0x85, 0x19, 0x1f, 0xeb, 0x8c, 0x46,
	0xe0, 0x9b, 0x8d, 0x24, 0x63, 0xca, 0x8d, 0xf0, 0xde, 0x66, 0x3f, 0x70, 0xd1, 0x6f, 0x15, 0x70,
	0xb8, 0xcd, 0xf4, 0x85, 0x58, 0x15, 0x44, 0xff, 0x17, 0x44, 0x9f, 0x92, 0x49, 0x41, 0xf4, 0x7d,
	0x13, 0xfd, 0x47, 0x05, 0x34, 0xd3, 0x44, 0xf7, 0xa7, 0x5c, 0xd2, 0xe2, 0xf2, 0x78, 0x08, 0xaa,
	0xff, 0xac, 0x80, 0xa3, 0x6d, 0x4d, 0xf7, 0x39, 0xfb, 0xda, 0x13, 0xb3, 0x82, 0xec, 0xfb, 0x26,
	0xfb, 0xaf, 0x0a, 0x30, 0xfe, 0xa5, 0xeb, 0x82, 0xed, 0x07, 0x62, 0xfb, 0x87, 0x2a, 0x78, 0x91,
	0x66, 0xfb, 0x9c, 0x32, 0xf7, 0xad, 0x43, 0x26, 0x54, 0x41, 0x08, 0xaa, 0xae, 0xa3, 0x1c, 0x4d,
	0xf4, 0x1e, 0xd6, 0x6b, 0xf8, 0x15, 0xd8, 0x57, 0xde, 0x8c, 0xf2, 0x85, 0xba, 0x1a, 0x53, 0x6f,
	0x34, 0x56, 0x9a, 0xd6, 0x27, 0x1f, 0xb5, 0xac, 0xcd, 0xe0, 0x14, 0x0d, 0x38, 0xcb, 0xae, 0xf5,
	0xb9, 0x46, 0xf4, 0xde, 0xbb, 0xf6, 0xcd, 0x52, 0xe0, 0x9b, 0xcd, 0xe8, 0x38, 0xd9, 0x78, 0x84,
	0x9f, 0xc6, 0x86, 0x08, 0x0d, 0x07, 0xe0, 0x79, 0x82, 0x08, 0x7f, 0xa5, 0x72, 0x66, 0x73, 0xcd,
	0x7d, 0xb5, 0xf7, 0x6e, 0xe0, 0x9b, 0x46, 0x36, 0xc9, 0x1a, 0x82, 0xf0, 0xb3, 0xd8, 0x76, 0x91,
	0x98, 0x60, 0x0b, 0xd4, 0x25, 0xfd, 0x66, 0x41, 0x19, 0xa1, 0x9a, 0xe7, 0x2a, 0x5e, 0xef, 0xa1,
	0x05, 0xea, 0x52, 0x10, 0xdd, 0xb6, 0x98, 0xb1, 0xc3, 0xc0, 0x37, 0x0f, 0xa2, 0xec, 0x89, 0x07,
	0xe1, 0x9a, 0x14, 0x24, 0x6c, 0x22, 0x7c, 0x0d, 0x9e, 0x84, 0xd6, 0xb8, 0x21, 0xc6, 0x8e, 0x0e,
	0x79, 0x11, 0xf8, 0x26, 0xdc, 0x84, 0xc4, 0x4e, 0x84, 0x81, 0x14, 0x24, 0xe6, 0x33, 0x2c, 0xe4,
	0x4a, 0x15, 0x15, 0xaa, 0x6d, 0x17, 0x4a, 0x3c, 0x08, 0xd7, 0x5c, 0xa9, 0x92, 0x42, 0xa1, 0x35,
	0x29, 0x54, 0xdf, 0x2e, 0x94, 0x72, 0x22, 0x0c, 0x5c, 0x99, 0x34, 0x0e, 0x0e, 0xc1, 0xb3, 0x44,
	0x2e, 0x5c, 0xb8, 0x54, 0x78, 0x6c, 0x64, 0xec, 0x9e, 0x94, 0x3b, 0xfb, 0x99, 0xe6, 0xac, 0xa7,
	0x5a, 0xeb, 0x2c, 0x04, 0xf5, 0x8e, 0x03, 0xdf, 0x3c, 0xca, 0xfe, 0x1f, 0x92, 0x68, 0x84, 0x0f,
	0x62, 0xd3, 0x59, 0x62, 0xf9, 0x69, 0x4b, 0x2d, 0x98, 0x92, 0x65, 0xa1, 0x96, 0x42, 0x2d, 0xb9,
	0x6a, 0x81, 0x06, 0xa8, 0xc9, 0x05, 0x21, 0x54, 0x4a, 0x03, 0x9c, 0x94, 0x3b, 0x75, 0x9c, 0x6c,
	0xd1, 0xdf, 0x8f, 0xb2, 0xef, 0x3d, 0x5f, 0x0a, 0x4f, 0xd1, 0x70, 0x4a, 0x2c, 0x54, 0xf4, 0xbf,
	0x52, 0x51, 0x07, 0x1c, 0x38, 0x64, 0xc2, 0xf8, 0xb7, 0x53, 0xea, 0x8e, 0xe8, 0x8c, 0x32, 0xa5,
	0x45, 0xb4, 0x87, 0xb7, 0xcd, 0xe8, 0xe7, 0x6a, 0x76, 0x5a, 0x3d, 0x25, 0x93, 0xe2, 0xe2, 0x28,
	0x2e, 0x8e, 0xfc, 0x8b, 0x23, 0x47, 0x56, 0x20, 0x5f, 0x56, 0x3f, 0x56, 0xc1, 0x3b, 0x69, 0x59,
	0x5d, 0x44, 0xcd, 0x29, 0xa4, 0x55, 0x48, 0x2b, 0x7f, 0x82, 0x79, 0x0d, 0x8e, 0xb5, 0x5e, 0x4e,
	0xb3, 0x42, 0x3a, 0x8f, 0x1e, 0x4c, 0xe9, 0x47, 0x56, 0x24, 0x9a, 0xf5, 0x23, 0xab, 0x1b, 0x0b,
	0x6d, 0x2b, 0xf0, 0x8d, 0x10, 0x5c, 0xc0, 0x06, 0x78, 0x4c, 0xc3, 0x45, 0xf4, 0x52, 0x82, 0xa3,
	0x4d, 0x0f, 0x5f, 0xdf, 0xb6, 0xcb, 0x37, 0xb7, 0xed, 0xf2, 0xaf, 0xb7, 0xed, 0xf2, 0xf7, 0x77,
	0xed, 0xd2, 0xcd, 0x5d, 0xbb, 0xf4, 0xcb, 0x5d, 0xbb, 0x74, 0xf9, 0xc9, 0xc8, 0x53, 0xe3, 0xc5,
	0xd0, 0x22, 0x7c, 0x66, 0x13, 0x2e, 0x67, 0x5c, 0xc6, 0x3f, 0x2f, 0xa5, 0x3b, 0xb1, 0xbf, 0xb3,
	0xd7, 0xdf, 0x0d, 0x3f, 0x7c, 0xf5, 0x32, 0xf9, 0xe6, 0xa8, 0x56, 0x73, 0x2a, 0x87, 0x3b, 0xfa,
	0xc3, 0xe1, 0xc7, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xf5, 0xdd, 0x0c, 0x83, 0xca, 0x14, 0x00,
	0x00,
}

func (m *EventChannelOpenInit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventChannelOpenInit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventChannelOpenInit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CounterpartyChannelId) > 0 {
		i -= len(m.CounterpartyChannelId)
		copy(dAtA[i:], m.CounterpartyChannelId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.CounterpartyChannelId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CounterpartyPortId) > 0 {
		i -= len(m.CounterpartyPortId)
		copy(dAtA[i:], m.CounterpartyPortId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.CounterpartyPortId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventChannelOpenTry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventChannelOpenTry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventChannelOpenTry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CounterpartyChannelId) > 0 {
		i -= len(m.CounterpartyChannelId)
		copy(dAtA[i:], m.CounterpartyChannelId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.CounterpartyChannelId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CounterpartyPortId) > 0 {
		i -= len(m.CounterpartyPortId)
		copy(dAtA[i:], m.CounterpartyPortId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.CounterpartyPortId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventChannelOpenAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventChannelOpenAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventChannelOpenAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CounterpartyChannelId) > 0 {
		i -= len(m.CounterpartyChannelId)
		copy(dAtA[i:], m.CounterpartyChannelId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.CounterpartyChannelId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CounterpartyPortId) > 0 {
		i -= len(m.CounterpartyPortId)
		copy(dAtA[i:], m.CounterpartyPortId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.CounterpartyPortId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventChannelCloseInit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventChannelCloseInit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventChannelCloseInit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CounterpartyChannelId) > 0 {
		i -= len(m.CounterpartyChannelId)
		copy(dAtA[i:], m.CounterpartyChannelId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.CounterpartyChannelId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CounterpartyPortId) > 0 {
		i -= len(m.CounterpartyPortId)
		copy(dAtA[i:], m.CounterpartyPortId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.CounterpartyPortId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventChannelOpenConfirm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventChannelOpenConfirm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventChannelOpenConfirm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CounterpartyChannelId) > 0 {
		i -= len(m.CounterpartyChannelId)
		copy(dAtA[i:], m.CounterpartyChannelId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.CounterpartyChannelId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CounterpartyPortId) > 0 {
		i -= len(m.CounterpartyPortId)
		copy(dAtA[i:], m.CounterpartyPortId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.CounterpartyPortId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventChannelCloseConfirm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventChannelCloseConfirm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventChannelCloseConfirm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CounterpartyChannelId) > 0 {
		i -= len(m.CounterpartyChannelId)
		copy(dAtA[i:], m.CounterpartyChannelId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.CounterpartyChannelId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CounterpartyPortId) > 0 {
		i -= len(m.CounterpartyPortId)
		copy(dAtA[i:], m.CounterpartyPortId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.CounterpartyPortId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventChannelSendPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventChannelSendPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventChannelSendPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChannelOrdering != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ChannelOrdering))
		i--
		dAtA[i] = 0x48
	}
	if len(m.DstChannel) > 0 {
		i -= len(m.DstChannel)
		copy(dAtA[i:], m.DstChannel)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.DstChannel)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.DstPort) > 0 {
		i -= len(m.DstPort)
		copy(dAtA[i:], m.DstPort)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.DstPort)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SrcChannel) > 0 {
		i -= len(m.SrcChannel)
		copy(dAtA[i:], m.SrcChannel)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.SrcChannel)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SrcPort) > 0 {
		i -= len(m.SrcPort)
		copy(dAtA[i:], m.SrcPort)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.SrcPort)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Sequence != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x20
	}
	if m.TimeoutTimestamp != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.TimeoutTimestamp))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.TimeoutHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventChannelRecvPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventChannelRecvPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventChannelRecvPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.ChannelOrdering != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ChannelOrdering))
		i--
		dAtA[i] = 0x48
	}
	if len(m.DstChannel) > 0 {
		i -= len(m.DstChannel)
		copy(dAtA[i:], m.DstChannel)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.DstChannel)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.DstPort) > 0 {
		i -= len(m.DstPort)
		copy(dAtA[i:], m.DstPort)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.DstPort)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SrcChannel) > 0 {
		i -= len(m.SrcChannel)
		copy(dAtA[i:], m.SrcChannel)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.SrcChannel)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SrcPort) > 0 {
		i -= len(m.SrcPort)
		copy(dAtA[i:], m.SrcPort)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.SrcPort)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Sequence != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x20
	}
	if m.TimeoutTimestamp != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.TimeoutTimestamp))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.TimeoutHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventChannelWriteAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventChannelWriteAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventChannelWriteAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Acknowledgement) > 0 {
		i -= len(m.Acknowledgement)
		copy(dAtA[i:], m.Acknowledgement)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Acknowledgement)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.DstChannel) > 0 {
		i -= len(m.DstChannel)
		copy(dAtA[i:], m.DstChannel)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.DstChannel)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.DstPort) > 0 {
		i -= len(m.DstPort)
		copy(dAtA[i:], m.DstPort)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.DstPort)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SrcChannel) > 0 {
		i -= len(m.SrcChannel)
		copy(dAtA[i:], m.SrcChannel)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.SrcChannel)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SrcPort) > 0 {
		i -= len(m.SrcPort)
		copy(dAtA[i:], m.SrcPort)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.SrcPort)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Sequence != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x20
	}
	if m.TimeoutTimestamp != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.TimeoutTimestamp))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.TimeoutHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventChannelAckPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventChannelAckPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventChannelAckPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Acknowledgement) > 0 {
		i -= len(m.Acknowledgement)
		copy(dAtA[i:], m.Acknowledgement)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Acknowledgement)))
		i--
		dAtA[i] = 0x52
	}
	if m.ChannelOrdering != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ChannelOrdering))
		i--
		dAtA[i] = 0x48
	}
	if len(m.DstChannel) > 0 {
		i -= len(m.DstChannel)
		copy(dAtA[i:], m.DstChannel)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.DstChannel)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.DstPort) > 0 {
		i -= len(m.DstPort)
		copy(dAtA[i:], m.DstPort)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.DstPort)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SrcChannel) > 0 {
		i -= len(m.SrcChannel)
		copy(dAtA[i:], m.SrcChannel)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.SrcChannel)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SrcPort) > 0 {
		i -= len(m.SrcPort)
		copy(dAtA[i:], m.SrcPort)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.SrcPort)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Sequence != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x20
	}
	if m.TimeoutTimestamp != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.TimeoutTimestamp))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.TimeoutHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventChannelTimeoutPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventChannelTimeoutPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventChannelTimeoutPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChannelOrdering != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ChannelOrdering))
		i--
		dAtA[i] = 0x48
	}
	if len(m.DstChannel) > 0 {
		i -= len(m.DstChannel)
		copy(dAtA[i:], m.DstChannel)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.DstChannel)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.DstPort) > 0 {
		i -= len(m.DstPort)
		copy(dAtA[i:], m.DstPort)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.DstPort)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SrcChannel) > 0 {
		i -= len(m.SrcChannel)
		copy(dAtA[i:], m.SrcChannel)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.SrcChannel)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SrcPort) > 0 {
		i -= len(m.SrcPort)
		copy(dAtA[i:], m.SrcPort)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.SrcPort)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Sequence != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x20
	}
	if m.TimeoutTimestamp != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.TimeoutTimestamp))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.TimeoutHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventAcknowledgementSuccess) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAcknowledgementSuccess) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAcknowledgementSuccess) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Success) > 0 {
		i -= len(m.Success)
		copy(dAtA[i:], m.Success)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Success)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventAcknowledgementError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAcknowledgementError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAcknowledgementError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventChannelOpenInit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.CounterpartyPortId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.CounterpartyChannelId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventChannelOpenTry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.CounterpartyPortId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.CounterpartyChannelId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventChannelOpenAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.CounterpartyPortId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.CounterpartyChannelId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventChannelCloseInit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.CounterpartyPortId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.CounterpartyChannelId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventChannelOpenConfirm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.CounterpartyPortId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.CounterpartyChannelId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventChannelCloseConfirm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.CounterpartyPortId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.CounterpartyChannelId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventChannelSendPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = m.TimeoutHeight.Size()
	n += 1 + l + sovEvent(uint64(l))
	if m.TimeoutTimestamp != 0 {
		n += 1 + sovEvent(uint64(m.TimeoutTimestamp))
	}
	if m.Sequence != 0 {
		n += 1 + sovEvent(uint64(m.Sequence))
	}
	l = len(m.SrcPort)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.SrcChannel)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.DstPort)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.DstChannel)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.ChannelOrdering != 0 {
		n += 1 + sovEvent(uint64(m.ChannelOrdering))
	}
	return n
}

func (m *EventChannelRecvPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = m.TimeoutHeight.Size()
	n += 1 + l + sovEvent(uint64(l))
	if m.TimeoutTimestamp != 0 {
		n += 1 + sovEvent(uint64(m.TimeoutTimestamp))
	}
	if m.Sequence != 0 {
		n += 1 + sovEvent(uint64(m.Sequence))
	}
	l = len(m.SrcPort)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.SrcChannel)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.DstPort)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.DstChannel)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.ChannelOrdering != 0 {
		n += 1 + sovEvent(uint64(m.ChannelOrdering))
	}
	if m.Success {
		n += 2
	}
	return n
}

func (m *EventChannelWriteAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = m.TimeoutHeight.Size()
	n += 1 + l + sovEvent(uint64(l))
	if m.TimeoutTimestamp != 0 {
		n += 1 + sovEvent(uint64(m.TimeoutTimestamp))
	}
	if m.Sequence != 0 {
		n += 1 + sovEvent(uint64(m.Sequence))
	}
	l = len(m.SrcPort)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.SrcChannel)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.DstPort)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.DstChannel)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Acknowledgement)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventChannelAckPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = m.TimeoutHeight.Size()
	n += 1 + l + sovEvent(uint64(l))
	if m.TimeoutTimestamp != 0 {
		n += 1 + sovEvent(uint64(m.TimeoutTimestamp))
	}
	if m.Sequence != 0 {
		n += 1 + sovEvent(uint64(m.Sequence))
	}
	l = len(m.SrcPort)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.SrcChannel)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.DstPort)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.DstChannel)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.ChannelOrdering != 0 {
		n += 1 + sovEvent(uint64(m.ChannelOrdering))
	}
	l = len(m.Acknowledgement)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventChannelTimeoutPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = m.TimeoutHeight.Size()
	n += 1 + l + sovEvent(uint64(l))
	if m.TimeoutTimestamp != 0 {
		n += 1 + sovEvent(uint64(m.TimeoutTimestamp))
	}
	if m.Sequence != 0 {
		n += 1 + sovEvent(uint64(m.Sequence))
	}
	l = len(m.SrcPort)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.SrcChannel)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.DstPort)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.DstChannel)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.ChannelOrdering != 0 {
		n += 1 + sovEvent(uint64(m.ChannelOrdering))
	}
	return n
}

func (m *EventAcknowledgementSuccess) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Success)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventAcknowledgementError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventChannelOpenInit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventChannelOpenInit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventChannelOpenInit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterpartyPortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CounterpartyPortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterpartyChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CounterpartyChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventChannelOpenTry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventChannelOpenTry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventChannelOpenTry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterpartyPortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CounterpartyPortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterpartyChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CounterpartyChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventChannelOpenAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventChannelOpenAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventChannelOpenAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterpartyPortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CounterpartyPortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterpartyChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CounterpartyChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventChannelCloseInit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventChannelCloseInit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventChannelCloseInit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterpartyPortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CounterpartyPortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterpartyChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CounterpartyChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventChannelOpenConfirm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventChannelOpenConfirm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventChannelOpenConfirm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterpartyPortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CounterpartyPortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterpartyChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CounterpartyChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventChannelCloseConfirm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventChannelCloseConfirm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventChannelCloseConfirm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterpartyPortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CounterpartyPortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterpartyChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CounterpartyChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventChannelSendPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventChannelSendPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventChannelSendPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TimeoutHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutTimestamp", wireType)
			}
			m.TimeoutTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelOrdering", wireType)
			}
			m.ChannelOrdering = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelOrdering |= Order(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventChannelRecvPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventChannelRecvPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventChannelRecvPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TimeoutHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutTimestamp", wireType)
			}
			m.TimeoutTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelOrdering", wireType)
			}
			m.ChannelOrdering = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelOrdering |= Order(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventChannelWriteAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventChannelWriteAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventChannelWriteAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TimeoutHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutTimestamp", wireType)
			}
			m.TimeoutTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Acknowledgement", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Acknowledgement = append(m.Acknowledgement[:0], dAtA[iNdEx:postIndex]...)
			if m.Acknowledgement == nil {
				m.Acknowledgement = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventChannelAckPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventChannelAckPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventChannelAckPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TimeoutHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutTimestamp", wireType)
			}
			m.TimeoutTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelOrdering", wireType)
			}
			m.ChannelOrdering = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelOrdering |= Order(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Acknowledgement", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Acknowledgement = append(m.Acknowledgement[:0], dAtA[iNdEx:postIndex]...)
			if m.Acknowledgement == nil {
				m.Acknowledgement = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventChannelTimeoutPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventChannelTimeoutPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventChannelTimeoutPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TimeoutHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutTimestamp", wireType)
			}
			m.TimeoutTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelOrdering", wireType)
			}
			m.ChannelOrdering = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelOrdering |= Order(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAcknowledgementSuccess) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAcknowledgementSuccess: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAcknowledgementSuccess: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Success = append(m.Success[:0], dAtA[iNdEx:postIndex]...)
			if m.Success == nil {
				m.Success = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAcknowledgementError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAcknowledgementError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAcknowledgementError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
