syntax = "proto3";
package cosmos_sdk.x.ibc.channel.v1;

option go_package = "github.com/cosmos/cosmos-sdk/x/ibc/04-channel/types";

import "third_party/proto/cosmos-proto/cosmos.proto";
import "third_party/proto/gogoproto/gogo.proto";
import "x/ibc/20-transfer/types/types.proto";
import "x/ibc/23-commitment/types/types.proto";

// MsgChannelOpenInit defines an sdk.Msg to initialize a channel handshake. It is
// called by a relayer on Chain A.
message MsgChannelOpenInit {
  string port_id = 1 [
    (gogoproto.customname) = "PortID",
    (gogoproto.moretags)    = "yaml:\"port_id\""]
  ;
  string channel_id = 2 [
    (gogoproto.customname) = "ChannelID",
    (gogoproto.moretags)    = "yaml:\"channel_id\""
  ];
  Channel channel = 3 [
    (gogoproto.nullable)    = false
  ];
  bytes signer = 4 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"
  ];
}

// MsgChannelOpenInit defines an sdk.Msg to try open  a channel handshake. It is
// called by a relayer on Chain A.
message MsgChannelOpenTry {
  string port_id = 1 [
    (gogoproto.customname) = "PortID",
    (gogoproto.moretags)    = "yaml:\"port_id\""]
  ;
  string channel_id = 2 [
    (gogoproto.customname) = "ChannelID",
    (gogoproto.moretags)    = "yaml:\"channel_id\""
  ];
  Channel channel = 3 [
    (gogoproto.nullable)    = false
  ];
  string counterparty_version = 4 [(gogoproto.moretags)    = "yaml:\"counterparty_version\""];
  cosmos_sdk.x.ibc.commitment.v1.MerkleProof proof_init = 5 [
    (gogoproto.nullable)    = false
  ];
  uint64 proof_height = 6;
  bytes signer = 7 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"
  ];
}

message MsgChannelOpenAck {
  string port_id = 1 [
    (gogoproto.customname) = "PortID",
    (gogoproto.moretags)    = "yaml:\"port_id\""]
  ;
  string channel_id = 2 [
    (gogoproto.customname) = "ChannelID",
    (gogoproto.moretags)    = "yaml:\"channel_id\""
  ];
  string counterparty_version = 3 [(gogoproto.moretags)    = "yaml:\"counterparty_version\""];
  cosmos_sdk.x.ibc.commitment.v1.MerkleProof proof_try = 4 [
    (gogoproto.nullable)    = false
  ];
  uint64 proof_height = 5;
  bytes signer = 6 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"
  ];
}

message MsgChannelOpenConfirm {
  string port_id = 1 [
    (gogoproto.customname) = "PortID",
    (gogoproto.moretags)    = "yaml:\"port_id\""]
  ;
  string channel_id = 2 [
    (gogoproto.customname) = "ChannelID",
    (gogoproto.moretags)    = "yaml:\"channel_id\""
  ];
  cosmos_sdk.x.ibc.commitment.v1.MerkleProof proof_ack = 3 [
    (gogoproto.nullable)    = false
  ];
  uint64 proof_height = 4;
  bytes signer = 5 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"
  ];
}

message MsgChannelCloseInit {
  string port_id = 1 [
    (gogoproto.customname) = "PortID",
    (gogoproto.moretags)    = "yaml:\"port_id\""]
  ;
  string channel_id = 2 [
    (gogoproto.customname) = "ChannelID",
    (gogoproto.moretags)    = "yaml:\"channel_id\""
  ];
  bytes signer = 3 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"
  ];
}

message MsgChannelCloseConfirm {
  string port_id = 1 [
    (gogoproto.customname) = "PortID",
    (gogoproto.moretags)    = "yaml:\"port_id\""]
  ;
  string channel_id = 2 [
    (gogoproto.customname) = "ChannelID",
    (gogoproto.moretags)    = "yaml:\"channel_id\""
  ];
  cosmos_sdk.x.ibc.commitment.v1.MerkleProof proof_init = 3 [
    (gogoproto.nullable)    = false
  ];
  uint64 proof_height = 4;
  bytes signer = 5 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"
  ];
}

message MsgPacket {
  Packet packet = 1 [
    (gogoproto.nullable)    = false
  ];
  cosmos_sdk.x.ibc.commitment.v1.MerkleProof proof = 2 [
    (gogoproto.nullable)    = false
  ];
  uint64 proof_height = 3;
  bytes signer = 4 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"
  ];
}

message MsgTimeout {
  Packet packet = 1 [
    (gogoproto.nullable)    = false
  ];
  cosmos_sdk.x.ibc.commitment.v1.MerkleProof proof = 2 [
    (gogoproto.nullable)    = false
  ];
  uint64 proof_height = 3;
  uint64 next_sequence_recv = 4;
  bytes signer = 5 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"
  ];
}

message MsgAcknowledgement {
  Packet packet = 1 [
    (gogoproto.nullable)    = false
  ];
  PacketAck acknowledgement = 2 [
    (gogoproto.nullable)    = false
  ];
  cosmos_sdk.x.ibc.commitment.v1.MerkleProof proof = 3 [
    (gogoproto.nullable)    = false
  ];
  uint64 proof_height = 4;
  bytes signer = 5 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"
  ];
}

// Order defines if a channel is ORDERED or UNORDERED
enum Order {
  option (gogoproto.goproto_enum_prefix)   = false;

  // zero-value for channel ordering
  NONE = 0;
  // packets can be delivered in any order, which may differ from the order in which they were sent.
  UNORDERED = 1;
  // packets are delivered exactly in the order which they were sent
  ORDERED = 2;
}

// State defines if a channel is in one of the following states:
// CLOSED, INIT, TRYOPEN or OPEN
enum State {
  option (gogoproto.goproto_enum_prefix)   = false;

  // Default State
  UNINITIALIZED = 0;
  // A channel end has just started the opening handshake.
  INIT = 1;
  // A channel end has acknowledged the handshake step on the counterparty chain.
  TRYOPEN = 2;         
  // A channel end has completed the handshake and is ready to send and receive packets.
  OPEN = 3;
   // A channel end has been closed and can no longer be used to send or receive packets.
	CLOSED = 4;
}

message Channel {
  State state = 1;
  Order ordering = 2;
  Counterparty counterparty = 3 [
    (gogoproto.nullable)    = false
  ];
  repeated string connection_hops = 4 [
    (gogoproto.moretags)    = "yaml:\"connection_hops\""
  ];
  string version = 5;
}

message Counterparty {
  string port_id = 1 [
    (gogoproto.customname) = "PortID",
    (gogoproto.moretags)   = "yaml:\"port_id\""]
  ;
  string channel_id = 2 [
    (gogoproto.customname) = "ChannelID",
    (gogoproto.moretags)   = "yaml:\"channel_id\""
  ];
}

// CommitPacket appends bigendian encoded timeout height and commitment bytes
// and then returns the hash of the result bytes.
// TODO: no specification for packet commitment currently,
// make it spec compatible once we have it.
message Packet {
  uint64 sequence = 1;
  string source_port = 2 [(gogoproto.moretags)    = "yaml:\"source_port\""];
  string source_channel = 3 [(gogoproto.moretags)    = "yaml:\"source_channel\""];
  string destination_port = 4 [(gogoproto.moretags)    = "yaml:\"destination_port\""];
  string destination_channel = 5 [(gogoproto.moretags)    = "yaml:\"destination_channel\""];
  PacketData data = 6 [
    (gogoproto.nullable) = false
  ];
}

message PacketData {
  option (cosmos_proto.interface_type) = "*github.com/cosmos/cosmos-sdk/x/ibc/04-channel/exported.PacketDataI";
  oneof value {
    cosmos_sdk.x.ibc.transfer.v1.FungibleTokenPacketData fungible_token = 1;
  }
}

message PacketAck {
  option (cosmos_proto.interface_type) = "*github.com/cosmos/cosmos-sdk/x/ibc/04-channel/exported.PacketAcknowledgementI";
  oneof value {
    cosmos_sdk.x.ibc.transfer.v1.AckDataTransfer ack_data_transfer = 1;
  }
}