syntax = "proto3";
package cosmos_sdk.x.ibc.04channel.v1;

option go_package            = "github.com/cosmos/cosmos-sdk/x/ibc/04-channel/types";
option (gogoproto.equal_all) = true;

import "third_party/proto/gogoproto/gogo.proto";
import "x/ibc/20-transfer/types/types.proto";
import "x/ibc/23-commitment/types.proto";
import "types/types.proto";

message MsgChannelOpenInit {
  string port_id = 1 [
    (gogoproto.nullable)    = false
  ];
	string channel_id = 2 [
    (gogoproto.nullable)    = false
  ];
  Channel channel = 3 [
    (gogoproto.nullable)    = false
  ];
  bytes signer = 4 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"
  ];
}

message MsgChannelOpenTry {
  string port_id = 1 [
    (gogoproto.nullable)    = false
  ];
	string channel_id = 2 [
    (gogoproto.nullable)    = false
  ];
  Channel channel = 3 [
    (gogoproto.nullable)    = false
  ];
  string counterparty_version = 4 [
    (gogoproto.nullable)    = false
  ];
  cosmos_sdk.x.ibc.23commitment.v1.Proof proof_init = 5 [
    (gogoproto.nullable)    = false
  ];
  uint64 proof_height = 6;
  bytes signer = 7 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"
  ];
}

message MsgChannelOpenAck {
  string port_id = 1 [
    (gogoproto.nullable)    = false
  ];
	string channel_id = 2 [
    (gogoproto.nullable)    = false
  ];
  string counterparty_version = 3 [
    (gogoproto.nullable)    = false
  ];
  cosmos_sdk.x.ibc.23commitment.v1.Proof proof_try = 4 [
    (gogoproto.nullable)    = false
  ];
  uint64 proof_height = 5;
  bytes signer = 6 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"
  ];
}

message MsgChannelOpenConfirm {
  string port_id = 1 [
    (gogoproto.nullable)    = false
  ];
	string channel_id = 2 [
    (gogoproto.nullable)    = false
  ];
  cosmos_sdk.x.ibc.23commitment.v1.Proof proof_ack = 3 [
    (gogoproto.nullable)    = false
  ];
  uint64 proof_height = 4;
  bytes signer = 5 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"
  ];
}

message MsgChannelCloseInit {
  string port_id = 1 [
    (gogoproto.nullable)    = false
  ];
	string channel_id = 2 [
    (gogoproto.nullable)    = false
  ];
  bytes signer = 3 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"
  ];
}

message MsgChannelCloseConfirm {
  string port_id = 1 [
    (gogoproto.nullable)    = false
  ];
	string channel_id = 2 [
    (gogoproto.nullable)    = false
  ];
  cosmos_sdk.x.ibc.23commitment.v1.Proof proof_init = 3 [
    (gogoproto.nullable)    = false
  ];
  uint64 proof_height = 4;
  bytes signer = 5 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"
  ];
}

message MsgPacket {
  Packet packet = 1 [
    (gogoproto.nullable)    = false
  ];
  cosmos_sdk.x.ibc.23commitment.v1.Proof proof = 2 [
    (gogoproto.nullable)    = false
  ];
  uint64 proof_height = 3;
  bytes signer = 4 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"
  ];
}

message MsgTimeout {
  Packet packet = 1 [
    (gogoproto.nullable)    = false
  ];
  cosmos_sdk.x.ibc.23commitment.v1.Proof proof = 2 [
    (gogoproto.nullable)    = false
  ];
  uint64 proof_height = 3;
  uint64 next_sequence_recv = 4;
  bytes signer = 5 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"
  ];
}

message MsgAcknowledgement {
  Packet packet = 1 [
    (gogoproto.nullable)    = false
  ];
  PacketAck acknowledgement = 2 [
    (gogoproto.nullable)    = false
  ];
  cosmos_sdk.x.ibc.23commitment.v1.Proof proof = 3 [
    (gogoproto.nullable)    = false
  ];
  uint64 proof_height = 4;
  bytes signer = 5 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"
  ];
}

message Channel {
  byte state = 1 [
    (gogoproto.nullable)    = false,
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/x/ibc/04-channel/exported.State",
  ];
  byte ordering = 2 [
    (gogoproto.nullable)    = false,
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/x/ibc/04-channel/exported.Order",
  ];
  Counterparty counterparty = 3 [
    (gogoproto.nullable)    = false,
  ];
  repeated string connection_hops = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags)    = "yaml:\"connection_hops\""
  ];
  string version = 5 [
    (gogoproto.nullable)    = false,
  ];
}

message Counterparty {
	string port_id = 1 [
    (gogoproto.nullable)    = false,
    (gogoproto.moretags)    = "yaml:\"port_id\""
  ];
	string channel_id = 2 [
    (gogoproto.nullable)    = false,
    (gogoproto.moretags)    = "yaml:\"channel_id\""
  ];
}


message Packet {
  uint64 sequence = 1;
  string source_port = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags)    = "yaml:\"source_port\""
  ];
  string source_channel = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags)    = "yaml:\"source_channel\""
  ];
  string destination_port = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags)    = "yaml:\"destination_port\""
  ];
  string destination_channel = 5 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags)    = "yaml:\"destination_channel\""
  ];
  PacketData data = 6 [
    (gogoproto.nullable) = false,
  ];
}

message PacketData {
  oneof value {
    cosmos_sdk.x.ibc.20transfer.v1.FungibleTokenPacketData fungible_token = 1;
  }
}


message PacketAck {
  oneof value {
    cosmos_sdk.x.ibc.20transfer.v1.AckDataTransfer ack_data_transfer = 1;
  }
}
