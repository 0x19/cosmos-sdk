// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: x/ibc/02-client/types/types.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_x_ibc_02_client_exported "github.com/cosmos/cosmos-sdk/x/ibc/02-client/exported"
	types "github.com/cosmos/cosmos-sdk/x/ibc/07-tendermint/types"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ClientState struct {
	// sum defines a set of all acceptable concrete ClientState implementations.
	//
	// Types that are valid to be assigned to Sum:
	//	*ClientState_Tendermint
	Sum isClientState_Sum `protobuf_oneof:"sum"`
}

func (m *ClientState) Reset()         { *m = ClientState{} }
func (m *ClientState) String() string { return proto.CompactTextString(m) }
func (*ClientState) ProtoMessage()    {}
func (*ClientState) Descriptor() ([]byte, []int) {
	return fileDescriptor_b069e9661172b6b9, []int{0}
}
func (m *ClientState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientState.Merge(m, src)
}
func (m *ClientState) XXX_Size() int {
	return m.Size()
}
func (m *ClientState) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientState.DiscardUnknown(m)
}

var xxx_messageInfo_ClientState proto.InternalMessageInfo

type isClientState_Sum interface {
	isClientState_Sum()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ClientState_Tendermint struct {
	Tendermint *types.ClientState `protobuf:"bytes,1,opt,name=tendermint,proto3,oneof" json:"tendermint,omitempty"`
}

func (*ClientState_Tendermint) isClientState_Sum() {}

func (m *ClientState) GetSum() isClientState_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *ClientState) GetTendermint() *types.ClientState {
	if x, ok := m.GetSum().(*ClientState_Tendermint); ok {
		return x.Tendermint
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ClientState) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ClientState_Tendermint)(nil),
	}
}

type ConsensusState struct {
	// sum defines a set of all acceptable concrete ClientState implementations.
	//
	// Types that are valid to be assigned to Sum:
	//	*ConsensusState_Tendermint
	Sum isConsensusState_Sum `protobuf_oneof:"sum"`
}

func (m *ConsensusState) Reset()         { *m = ConsensusState{} }
func (m *ConsensusState) String() string { return proto.CompactTextString(m) }
func (*ConsensusState) ProtoMessage()    {}
func (*ConsensusState) Descriptor() ([]byte, []int) {
	return fileDescriptor_b069e9661172b6b9, []int{1}
}
func (m *ConsensusState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsensusState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsensusState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusState.Merge(m, src)
}
func (m *ConsensusState) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusState) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusState.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusState proto.InternalMessageInfo

type isConsensusState_Sum interface {
	isConsensusState_Sum()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ConsensusState_Tendermint struct {
	Tendermint *types.ConsensusState `protobuf:"bytes,1,opt,name=tendermint,proto3,oneof" json:"tendermint,omitempty"`
}

func (*ConsensusState_Tendermint) isConsensusState_Sum() {}

func (m *ConsensusState) GetSum() isConsensusState_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *ConsensusState) GetTendermint() *types.ConsensusState {
	if x, ok := m.GetSum().(*ConsensusState_Tendermint); ok {
		return x.Tendermint
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ConsensusState) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ConsensusState_Tendermint)(nil),
	}
}

type Misbehaviour struct {
	// sum defines a set of all acceptable concrete ClientState implementations.
	//
	// Types that are valid to be assigned to Sum:
	//	*Misbehaviour_Tendermint
	Sum isMisbehaviour_Sum `protobuf_oneof:"sum"`
}

func (m *Misbehaviour) Reset()         { *m = Misbehaviour{} }
func (m *Misbehaviour) String() string { return proto.CompactTextString(m) }
func (*Misbehaviour) ProtoMessage()    {}
func (*Misbehaviour) Descriptor() ([]byte, []int) {
	return fileDescriptor_b069e9661172b6b9, []int{2}
}
func (m *Misbehaviour) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Misbehaviour) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Misbehaviour.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Misbehaviour) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Misbehaviour.Merge(m, src)
}
func (m *Misbehaviour) XXX_Size() int {
	return m.Size()
}
func (m *Misbehaviour) XXX_DiscardUnknown() {
	xxx_messageInfo_Misbehaviour.DiscardUnknown(m)
}

var xxx_messageInfo_Misbehaviour proto.InternalMessageInfo

type isMisbehaviour_Sum interface {
	isMisbehaviour_Sum()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Misbehaviour_Tendermint struct {
	Tendermint *types.Evidence `protobuf:"bytes,1,opt,name=tendermint,proto3,oneof" json:"tendermint,omitempty"`
}

func (*Misbehaviour_Tendermint) isMisbehaviour_Sum() {}

func (m *Misbehaviour) GetSum() isMisbehaviour_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *Misbehaviour) GetTendermint() *types.Evidence {
	if x, ok := m.GetSum().(*Misbehaviour_Tendermint); ok {
		return x.Tendermint
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Misbehaviour) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Misbehaviour_Tendermint)(nil),
	}
}

type Header struct {
	// sum defines a set of all acceptable concrete ClientState implementations.
	//
	// Types that are valid to be assigned to Sum:
	//	*Header_Tendermint
	Sum isHeader_Sum `protobuf_oneof:"sum"`
}

func (m *Header) Reset()         { *m = Header{} }
func (m *Header) String() string { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()    {}
func (*Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_b069e9661172b6b9, []int{3}
}
func (m *Header) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Header.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Header.Merge(m, src)
}
func (m *Header) XXX_Size() int {
	return m.Size()
}
func (m *Header) XXX_DiscardUnknown() {
	xxx_messageInfo_Header.DiscardUnknown(m)
}

var xxx_messageInfo_Header proto.InternalMessageInfo

type isHeader_Sum interface {
	isHeader_Sum()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Header_Tendermint struct {
	Tendermint *types.Header `protobuf:"bytes,1,opt,name=tendermint,proto3,oneof" json:"tendermint,omitempty"`
}

func (*Header_Tendermint) isHeader_Sum() {}

func (m *Header) GetSum() isHeader_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *Header) GetTendermint() *types.Header {
	if x, ok := m.GetSum().(*Header_Tendermint); ok {
		return x.Tendermint
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Header) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Header_Tendermint)(nil),
	}
}

type MsgCreateClient struct {
	// Types that are valid to be assigned to Sum:
	//	*MsgCreateClient_Tendermint
	Sum isMsgCreateClient_Sum `protobuf_oneof:"sum"`
}

func (m *MsgCreateClient) Reset()         { *m = MsgCreateClient{} }
func (m *MsgCreateClient) String() string { return proto.CompactTextString(m) }
func (*MsgCreateClient) ProtoMessage()    {}
func (*MsgCreateClient) Descriptor() ([]byte, []int) {
	return fileDescriptor_b069e9661172b6b9, []int{4}
}
func (m *MsgCreateClient) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateClient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateClient.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateClient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateClient.Merge(m, src)
}
func (m *MsgCreateClient) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateClient) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateClient.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateClient proto.InternalMessageInfo

type isMsgCreateClient_Sum interface {
	isMsgCreateClient_Sum()
	MarshalTo([]byte) (int, error)
	Size() int
}

type MsgCreateClient_Tendermint struct {
	Tendermint *types.MsgCreateClient `protobuf:"bytes,1,opt,name=tendermint,proto3,oneof" json:"tendermint,omitempty"`
}

func (*MsgCreateClient_Tendermint) isMsgCreateClient_Sum() {}

func (m *MsgCreateClient) GetSum() isMsgCreateClient_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *MsgCreateClient) GetTendermint() *types.MsgCreateClient {
	if x, ok := m.GetSum().(*MsgCreateClient_Tendermint); ok {
		return x.Tendermint
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MsgCreateClient) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MsgCreateClient_Tendermint)(nil),
	}
}

type MsgUpdateClient struct {
	// sum defines a set of all acceptable concrete ClientState implementations.
	//
	// Types that are valid to be assigned to Sum:
	//	*MsgUpdateClient_Tendermint
	Sum isMsgUpdateClient_Sum `protobuf_oneof:"sum"`
}

func (m *MsgUpdateClient) Reset()         { *m = MsgUpdateClient{} }
func (m *MsgUpdateClient) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateClient) ProtoMessage()    {}
func (*MsgUpdateClient) Descriptor() ([]byte, []int) {
	return fileDescriptor_b069e9661172b6b9, []int{5}
}
func (m *MsgUpdateClient) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateClient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateClient.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateClient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateClient.Merge(m, src)
}
func (m *MsgUpdateClient) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateClient) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateClient.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateClient proto.InternalMessageInfo

type isMsgUpdateClient_Sum interface {
	isMsgUpdateClient_Sum()
	MarshalTo([]byte) (int, error)
	Size() int
}

type MsgUpdateClient_Tendermint struct {
	Tendermint *types.MsgUpdateClient `protobuf:"bytes,1,opt,name=tendermint,proto3,oneof" json:"tendermint,omitempty"`
}

func (*MsgUpdateClient_Tendermint) isMsgUpdateClient_Sum() {}

func (m *MsgUpdateClient) GetSum() isMsgUpdateClient_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *MsgUpdateClient) GetTendermint() *types.MsgUpdateClient {
	if x, ok := m.GetSum().(*MsgUpdateClient_Tendermint); ok {
		return x.Tendermint
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MsgUpdateClient) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MsgUpdateClient_Tendermint)(nil),
	}
}

func init() {
	proto.RegisterType((*ClientState)(nil), "cosmos_sdk.x.ibc.client.v1.ClientState")
	proto.RegisterType((*ConsensusState)(nil), "cosmos_sdk.x.ibc.client.v1.ConsensusState")
	proto.RegisterType((*Misbehaviour)(nil), "cosmos_sdk.x.ibc.client.v1.Misbehaviour")
	proto.RegisterType((*Header)(nil), "cosmos_sdk.x.ibc.client.v1.Header")
	proto.RegisterType((*MsgCreateClient)(nil), "cosmos_sdk.x.ibc.client.v1.MsgCreateClient")
	proto.RegisterType((*MsgUpdateClient)(nil), "cosmos_sdk.x.ibc.client.v1.MsgUpdateClient")
}

func init() { proto.RegisterFile("x/ibc/02-client/types/types.proto", fileDescriptor_b069e9661172b6b9) }

var fileDescriptor_b069e9661172b6b9 = []byte{
	// 414 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0xd4, 0xcf, 0x0a, 0xd3, 0x30,
	0x1c, 0xc0, 0xf1, 0x06, 0x71, 0x87, 0x4c, 0x14, 0x7a, 0x92, 0x1d, 0x8a, 0x0e, 0x94, 0xe1, 0x48,
	0xea, 0xe6, 0x41, 0x10, 0x3c, 0xb8, 0xb2, 0x39, 0x87, 0x03, 0xff, 0xe0, 0xc5, 0xcb, 0x68, 0x9b,
	0xb0, 0x85, 0xd9, 0xa6, 0x24, 0x69, 0xd9, 0xde, 0xc2, 0x07, 0xf0, 0x09, 0xf4, 0x5a, 0xf0, 0x15,
	0xa4, 0xa7, 0x1d, 0x3d, 0xca, 0xf6, 0x22, 0x42, 0xb3, 0xb2, 0xae, 0x16, 0x8a, 0xd5, 0x4b, 0xa1,
	0xf0, 0xeb, 0xf7, 0xf7, 0x21, 0x94, 0xc0, 0xfb, 0x3b, 0x9b, 0x79, 0xbe, 0xfd, 0x78, 0x8c, 0xfc,
	0x4f, 0x8c, 0x86, 0xca, 0x56, 0xfb, 0x88, 0x4a, 0xfd, 0xc4, 0x91, 0xe0, 0x8a, 0x9b, 0x3d, 0x9f,
	0xcb, 0x80, 0xcb, 0x95, 0x24, 0x5b, 0xbc, 0xc3, 0xcc, 0xf3, 0xb1, 0x1e, 0xc5, 0xc9, 0xa8, 0x37,
	0x54, 0x1b, 0x26, 0xc8, 0x2a, 0x72, 0x85, 0xda, 0xdb, 0xf9, 0xb8, 0xad, 0xa7, 0x51, 0xf9, 0x45,
	0x87, 0x7a, 0x0f, 0xce, 0xbb, 0x9e, 0x22, 0x45, 0x43, 0x42, 0x45, 0xc0, 0xea, 0xf6, 0xf5, 0xbf,
	0x01, 0xd8, 0x75, 0xf2, 0x0d, 0xef, 0x95, 0xab, 0xa8, 0xb9, 0x84, 0xf0, 0x32, 0x7f, 0x17, 0xdc,
	0x03, 0x83, 0xee, 0x78, 0x88, 0xff, 0x40, 0x5d, 0x66, 0x70, 0x32, 0xc2, 0xa5, 0xc0, 0xdc, 0x78,
	0x57, 0x0a, 0x3c, 0x9b, 0x65, 0x29, 0x9a, 0x3c, 0x5a, 0x33, 0xb5, 0x89, 0x3d, 0xec, 0xf3, 0xe0,
	0x6c, 0x2c, 0xdc, 0x92, 0x6c, 0xed, 0xea, 0x99, 0xd0, 0x5d, 0xc4, 0x85, 0xa2, 0xa4, 0x5c, 0x9d,
	0xdc, 0x84, 0x37, 0x64, 0x1c, 0xf4, 0x53, 0x00, 0x6f, 0x3b, 0x3c, 0x94, 0x34, 0x94, 0xb1, 0xd4,
	0xe0, 0x37, 0x35, 0x60, 0xdc, 0x08, 0xbe, 0x6a, 0x54, 0xcc, 0xaf, 0xb2, 0x14, 0x4d, 0xdb, 0x9a,
	0xaf, 0xc2, 0x05, 0xfb, 0x2b, 0x80, 0xb7, 0x96, 0x4c, 0x7a, 0x74, 0xe3, 0x26, 0x8c, 0xc7, 0xc2,
	0x5c, 0xd4, 0xa0, 0x07, 0x4d, 0xe8, 0x69, 0xc2, 0x08, 0x0d, 0xfd, 0x2a, 0xf7, 0x65, 0x96, 0x22,
	0xa7, 0x25, 0xb7, 0x8c, 0x2a, 0xb0, 0x5f, 0x00, 0xec, 0xcc, 0xa9, 0x4b, 0xa8, 0x30, 0xe7, 0x35,
	0xcc, 0x87, 0x4d, 0x4c, 0xfd, 0x6d, 0x05, 0xf9, 0x22, 0x4b, 0xd1, 0xf3, 0x96, 0x48, 0x1d, 0x2c,
	0x78, 0xdf, 0x01, 0xbc, 0xb3, 0x94, 0x6b, 0x47, 0x50, 0x57, 0x51, 0xfd, 0x8b, 0x98, 0x6f, 0x6b,
	0x9c, 0x76, 0x93, 0xb3, 0x12, 0xa9, 0x80, 0x17, 0x59, 0x8a, 0x66, 0x6d, 0x4f, 0xf5, 0xba, 0x5c,
	0x91, 0x7f, 0x88, 0xc8, 0xbf, 0xcb, 0xcb, 0x91, 0xff, 0x2b, 0x2f, 0x97, 0xcf, 0xf2, 0xc9, 0xeb,
	0x1f, 0x47, 0x0b, 0x1c, 0x8e, 0x16, 0xf8, 0x75, 0xb4, 0xc0, 0xe7, 0x93, 0x65, 0x1c, 0x4e, 0x96,
	0xf1, 0xf3, 0x64, 0x19, 0x1f, 0xc7, 0x7f, 0xb5, 0x27, 0xbf, 0x78, 0xbc, 0x4e, 0x7e, 0xf3, 0x3c,
	0xf9, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xe7, 0xa3, 0xff, 0x4d, 0x0e, 0x05, 0x00, 0x00,
}

func (this *ClientState) GetClientState() github_com_cosmos_cosmos_sdk_x_ibc_02_client_exported.ClientState {
	if x := this.GetTendermint(); x != nil {
		return x
	}
	return nil
}

func (this *ClientState) SetClientState(value github_com_cosmos_cosmos_sdk_x_ibc_02_client_exported.ClientState) error {
	if value == nil {
		this.Sum = nil
		return nil
	}
	switch vt := value.(type) {
	case *types.ClientState:
		this.Sum = &ClientState_Tendermint{vt}
		return nil
	}
	return fmt.Errorf("can't encode value of type %T as message ClientState", value)
}

func (this *ConsensusState) GetConsensusState() github_com_cosmos_cosmos_sdk_x_ibc_02_client_exported.ConsensusState {
	if x := this.GetTendermint(); x != nil {
		return x
	}
	return nil
}

func (this *ConsensusState) SetConsensusState(value github_com_cosmos_cosmos_sdk_x_ibc_02_client_exported.ConsensusState) error {
	if value == nil {
		this.Sum = nil
		return nil
	}
	switch vt := value.(type) {
	case *types.ConsensusState:
		this.Sum = &ConsensusState_Tendermint{vt}
		return nil
	}
	return fmt.Errorf("can't encode value of type %T as message ConsensusState", value)
}

func (this *Misbehaviour) GetMisbehaviour() github_com_cosmos_cosmos_sdk_x_ibc_02_client_exported.Misbehaviour {
	if x := this.GetTendermint(); x != nil {
		return x
	}
	return nil
}

func (this *Misbehaviour) SetMisbehaviour(value github_com_cosmos_cosmos_sdk_x_ibc_02_client_exported.Misbehaviour) error {
	if value == nil {
		this.Sum = nil
		return nil
	}
	switch vt := value.(type) {
	case *types.Evidence:
		this.Sum = &Misbehaviour_Tendermint{vt}
		return nil
	}
	return fmt.Errorf("can't encode value of type %T as message Misbehaviour", value)
}

func (this *Header) GetHeader() github_com_cosmos_cosmos_sdk_x_ibc_02_client_exported.Header {
	if x := this.GetTendermint(); x != nil {
		return x
	}
	return nil
}

func (this *Header) SetHeader(value github_com_cosmos_cosmos_sdk_x_ibc_02_client_exported.Header) error {
	if value == nil {
		this.Sum = nil
		return nil
	}
	switch vt := value.(type) {
	case *types.Header:
		this.Sum = &Header_Tendermint{vt}
		return nil
	}
	return fmt.Errorf("can't encode value of type %T as message Header", value)
}

func (this *MsgCreateClient) GetMsgCreateClient() github_com_cosmos_cosmos_sdk_x_ibc_02_client_exported.MsgCreateClient {
	if x := this.GetTendermint(); x != nil {
		return x
	}
	return nil
}

func (this *MsgCreateClient) SetMsgCreateClient(value github_com_cosmos_cosmos_sdk_x_ibc_02_client_exported.MsgCreateClient) error {
	if value == nil {
		this.Sum = nil
		return nil
	}
	switch vt := value.(type) {
	case *types.MsgCreateClient:
		this.Sum = &MsgCreateClient_Tendermint{vt}
		return nil
	}
	return fmt.Errorf("can't encode value of type %T as message MsgCreateClient", value)
}

func (this *MsgUpdateClient) GetMsgUpdateClient() github_com_cosmos_cosmos_sdk_x_ibc_02_client_exported.MsgUpdateClient {
	if x := this.GetTendermint(); x != nil {
		return x
	}
	return nil
}

func (this *MsgUpdateClient) SetMsgUpdateClient(value github_com_cosmos_cosmos_sdk_x_ibc_02_client_exported.MsgUpdateClient) error {
	if value == nil {
		this.Sum = nil
		return nil
	}
	switch vt := value.(type) {
	case *types.MsgUpdateClient:
		this.Sum = &MsgUpdateClient_Tendermint{vt}
		return nil
	}
	return fmt.Errorf("can't encode value of type %T as message MsgUpdateClient", value)
}

func (m *ClientState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sum != nil {
		{
			size := m.Sum.Size()
			i -= size
			if _, err := m.Sum.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ClientState_Tendermint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientState_Tendermint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Tendermint != nil {
		{
			size, err := m.Tendermint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ConsensusState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sum != nil {
		{
			size := m.Sum.Size()
			i -= size
			if _, err := m.Sum.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ConsensusState_Tendermint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusState_Tendermint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Tendermint != nil {
		{
			size, err := m.Tendermint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Misbehaviour) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Misbehaviour) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Misbehaviour) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sum != nil {
		{
			size := m.Sum.Size()
			i -= size
			if _, err := m.Sum.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Misbehaviour_Tendermint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Misbehaviour_Tendermint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Tendermint != nil {
		{
			size, err := m.Tendermint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Header) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Header) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Header) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sum != nil {
		{
			size := m.Sum.Size()
			i -= size
			if _, err := m.Sum.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Header_Tendermint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Header_Tendermint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Tendermint != nil {
		{
			size, err := m.Tendermint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *MsgCreateClient) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateClient) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateClient) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sum != nil {
		{
			size := m.Sum.Size()
			i -= size
			if _, err := m.Sum.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateClient_Tendermint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateClient_Tendermint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Tendermint != nil {
		{
			size, err := m.Tendermint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *MsgUpdateClient) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateClient) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateClient) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sum != nil {
		{
			size := m.Sum.Size()
			i -= size
			if _, err := m.Sum.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateClient_Tendermint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateClient_Tendermint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Tendermint != nil {
		{
			size, err := m.Tendermint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ClientState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sum != nil {
		n += m.Sum.Size()
	}
	return n
}

func (m *ClientState_Tendermint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tendermint != nil {
		l = m.Tendermint.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ConsensusState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sum != nil {
		n += m.Sum.Size()
	}
	return n
}

func (m *ConsensusState_Tendermint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tendermint != nil {
		l = m.Tendermint.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Misbehaviour) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sum != nil {
		n += m.Sum.Size()
	}
	return n
}

func (m *Misbehaviour_Tendermint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tendermint != nil {
		l = m.Tendermint.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Header) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sum != nil {
		n += m.Sum.Size()
	}
	return n
}

func (m *Header_Tendermint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tendermint != nil {
		l = m.Tendermint.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *MsgCreateClient) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sum != nil {
		n += m.Sum.Size()
	}
	return n
}

func (m *MsgCreateClient_Tendermint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tendermint != nil {
		l = m.Tendermint.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *MsgUpdateClient) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sum != nil {
		n += m.Sum.Size()
	}
	return n
}

func (m *MsgUpdateClient_Tendermint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tendermint != nil {
		l = m.Tendermint.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClientState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tendermint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.ClientState{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ClientState_Tendermint{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tendermint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.ConsensusState{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ConsensusState_Tendermint{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Misbehaviour) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Misbehaviour: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Misbehaviour: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tendermint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.Evidence{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Misbehaviour_Tendermint{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Header) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Header: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Header: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tendermint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.Header{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &Header_Tendermint{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateClient) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateClient: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateClient: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tendermint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.MsgCreateClient{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &MsgCreateClient_Tendermint{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateClient) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateClient: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateClient: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tendermint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.MsgUpdateClient{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &MsgUpdateClient_Tendermint{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
