// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/applications/transfer/v1/event.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/x/ibc/core/04-channel/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_tendermint_tendermint_libs_bytes "github.com/tendermint/tendermint/libs/bytes"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventOnRecvPacket is a typed event emitted on receiving packet
type EventOnRecvPacket struct {
	Receiver string `protobuf:"bytes,1,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Denom    string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount   uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Success  bool   `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *EventOnRecvPacket) Reset()         { *m = EventOnRecvPacket{} }
func (m *EventOnRecvPacket) String() string { return proto.CompactTextString(m) }
func (*EventOnRecvPacket) ProtoMessage()    {}
func (*EventOnRecvPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_c490d680aa16af7e, []int{0}
}
func (m *EventOnRecvPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventOnRecvPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventOnRecvPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventOnRecvPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventOnRecvPacket.Merge(m, src)
}
func (m *EventOnRecvPacket) XXX_Size() int {
	return m.Size()
}
func (m *EventOnRecvPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_EventOnRecvPacket.DiscardUnknown(m)
}

var xxx_messageInfo_EventOnRecvPacket proto.InternalMessageInfo

func (m *EventOnRecvPacket) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *EventOnRecvPacket) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *EventOnRecvPacket) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *EventOnRecvPacket) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// EventOnAcknowledgementPacket is a typed event emitted on packet acknowledgement
type EventOnAcknowledgementPacket struct {
	Receiver        string                `protobuf:"bytes,1,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Denom           string                `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount          uint64                `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Acknowledgement types.Acknowledgement `protobuf:"bytes,4,opt,name=acknowledgement,proto3" json:"acknowledgement"`
}

func (m *EventOnAcknowledgementPacket) Reset()         { *m = EventOnAcknowledgementPacket{} }
func (m *EventOnAcknowledgementPacket) String() string { return proto.CompactTextString(m) }
func (*EventOnAcknowledgementPacket) ProtoMessage()    {}
func (*EventOnAcknowledgementPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_c490d680aa16af7e, []int{1}
}
func (m *EventOnAcknowledgementPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventOnAcknowledgementPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventOnAcknowledgementPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventOnAcknowledgementPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventOnAcknowledgementPacket.Merge(m, src)
}
func (m *EventOnAcknowledgementPacket) XXX_Size() int {
	return m.Size()
}
func (m *EventOnAcknowledgementPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_EventOnAcknowledgementPacket.DiscardUnknown(m)
}

var xxx_messageInfo_EventOnAcknowledgementPacket proto.InternalMessageInfo

func (m *EventOnAcknowledgementPacket) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *EventOnAcknowledgementPacket) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *EventOnAcknowledgementPacket) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *EventOnAcknowledgementPacket) GetAcknowledgement() types.Acknowledgement {
	if m != nil {
		return m.Acknowledgement
	}
	return types.Acknowledgement{}
}

// EventAcknowledgementSuccess is a typed event emitted on packet acknowledgement success
type EventAcknowledgementSuccess struct {
	Success []byte `protobuf:"bytes,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *EventAcknowledgementSuccess) Reset()         { *m = EventAcknowledgementSuccess{} }
func (m *EventAcknowledgementSuccess) String() string { return proto.CompactTextString(m) }
func (*EventAcknowledgementSuccess) ProtoMessage()    {}
func (*EventAcknowledgementSuccess) Descriptor() ([]byte, []int) {
	return fileDescriptor_c490d680aa16af7e, []int{2}
}
func (m *EventAcknowledgementSuccess) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAcknowledgementSuccess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAcknowledgementSuccess.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAcknowledgementSuccess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAcknowledgementSuccess.Merge(m, src)
}
func (m *EventAcknowledgementSuccess) XXX_Size() int {
	return m.Size()
}
func (m *EventAcknowledgementSuccess) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAcknowledgementSuccess.DiscardUnknown(m)
}

var xxx_messageInfo_EventAcknowledgementSuccess proto.InternalMessageInfo

func (m *EventAcknowledgementSuccess) GetSuccess() []byte {
	if m != nil {
		return m.Success
	}
	return nil
}

// EventAcknowledgementError is a typed event emitted on packet acknowledgement error
type EventAcknowledgementError struct {
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *EventAcknowledgementError) Reset()         { *m = EventAcknowledgementError{} }
func (m *EventAcknowledgementError) String() string { return proto.CompactTextString(m) }
func (*EventAcknowledgementError) ProtoMessage()    {}
func (*EventAcknowledgementError) Descriptor() ([]byte, []int) {
	return fileDescriptor_c490d680aa16af7e, []int{3}
}
func (m *EventAcknowledgementError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAcknowledgementError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAcknowledgementError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAcknowledgementError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAcknowledgementError.Merge(m, src)
}
func (m *EventAcknowledgementError) XXX_Size() int {
	return m.Size()
}
func (m *EventAcknowledgementError) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAcknowledgementError.DiscardUnknown(m)
}

var xxx_messageInfo_EventAcknowledgementError proto.InternalMessageInfo

func (m *EventAcknowledgementError) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// EventOnTimeoutPacket is a typed event emitted on packet timeout
type EventOnTimeoutPacket struct {
	RefundReceiver string `protobuf:"bytes,1,opt,name=refund_receiver,json=refundReceiver,proto3" json:"refund_receiver,omitempty"`
	RefundDenom    string `protobuf:"bytes,2,opt,name=refund_denom,json=refundDenom,proto3" json:"refund_denom,omitempty"`
	RefundAmount   uint64 `protobuf:"varint,3,opt,name=refund_amount,json=refundAmount,proto3" json:"refund_amount,omitempty"`
}

func (m *EventOnTimeoutPacket) Reset()         { *m = EventOnTimeoutPacket{} }
func (m *EventOnTimeoutPacket) String() string { return proto.CompactTextString(m) }
func (*EventOnTimeoutPacket) ProtoMessage()    {}
func (*EventOnTimeoutPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_c490d680aa16af7e, []int{4}
}
func (m *EventOnTimeoutPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventOnTimeoutPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventOnTimeoutPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventOnTimeoutPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventOnTimeoutPacket.Merge(m, src)
}
func (m *EventOnTimeoutPacket) XXX_Size() int {
	return m.Size()
}
func (m *EventOnTimeoutPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_EventOnTimeoutPacket.DiscardUnknown(m)
}

var xxx_messageInfo_EventOnTimeoutPacket proto.InternalMessageInfo

func (m *EventOnTimeoutPacket) GetRefundReceiver() string {
	if m != nil {
		return m.RefundReceiver
	}
	return ""
}

func (m *EventOnTimeoutPacket) GetRefundDenom() string {
	if m != nil {
		return m.RefundDenom
	}
	return ""
}

func (m *EventOnTimeoutPacket) GetRefundAmount() uint64 {
	if m != nil {
		return m.RefundAmount
	}
	return 0
}

// EventTransfer is a typed event emitted on ibc transfer
type EventTransfer struct {
	Sender   string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Receiver string `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
}

func (m *EventTransfer) Reset()         { *m = EventTransfer{} }
func (m *EventTransfer) String() string { return proto.CompactTextString(m) }
func (*EventTransfer) ProtoMessage()    {}
func (*EventTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_c490d680aa16af7e, []int{5}
}
func (m *EventTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventTransfer.Merge(m, src)
}
func (m *EventTransfer) XXX_Size() int {
	return m.Size()
}
func (m *EventTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_EventTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_EventTransfer proto.InternalMessageInfo

func (m *EventTransfer) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventTransfer) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

// EventDenominationTrace is a typed event for denomination trace
type EventDenominationTrace struct {
	TraceHash github_com_tendermint_tendermint_libs_bytes.HexBytes `protobuf:"bytes,1,opt,name=trace_hash,json=traceHash,proto3,casttype=github.com/tendermint/tendermint/libs/bytes.HexBytes" json:"trace_hash,omitempty"`
	Denom     string                                               `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *EventDenominationTrace) Reset()         { *m = EventDenominationTrace{} }
func (m *EventDenominationTrace) String() string { return proto.CompactTextString(m) }
func (*EventDenominationTrace) ProtoMessage()    {}
func (*EventDenominationTrace) Descriptor() ([]byte, []int) {
	return fileDescriptor_c490d680aa16af7e, []int{6}
}
func (m *EventDenominationTrace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventDenominationTrace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventDenominationTrace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventDenominationTrace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDenominationTrace.Merge(m, src)
}
func (m *EventDenominationTrace) XXX_Size() int {
	return m.Size()
}
func (m *EventDenominationTrace) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDenominationTrace.DiscardUnknown(m)
}

var xxx_messageInfo_EventDenominationTrace proto.InternalMessageInfo

func (m *EventDenominationTrace) GetTraceHash() github_com_tendermint_tendermint_libs_bytes.HexBytes {
	if m != nil {
		return m.TraceHash
	}
	return nil
}

func (m *EventDenominationTrace) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func init() {
	proto.RegisterType((*EventOnRecvPacket)(nil), "ibc.applications.transfer.v1.EventOnRecvPacket")
	proto.RegisterType((*EventOnAcknowledgementPacket)(nil), "ibc.applications.transfer.v1.EventOnAcknowledgementPacket")
	proto.RegisterType((*EventAcknowledgementSuccess)(nil), "ibc.applications.transfer.v1.EventAcknowledgementSuccess")
	proto.RegisterType((*EventAcknowledgementError)(nil), "ibc.applications.transfer.v1.EventAcknowledgementError")
	proto.RegisterType((*EventOnTimeoutPacket)(nil), "ibc.applications.transfer.v1.EventOnTimeoutPacket")
	proto.RegisterType((*EventTransfer)(nil), "ibc.applications.transfer.v1.EventTransfer")
	proto.RegisterType((*EventDenominationTrace)(nil), "ibc.applications.transfer.v1.EventDenominationTrace")
}

func init() {
	proto.RegisterFile("ibc/applications/transfer/v1/event.proto", fileDescriptor_c490d680aa16af7e)
}

var fileDescriptor_c490d680aa16af7e = []byte{
	// 512 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0xc1, 0x6f, 0xd3, 0x3e,
	0x14, 0xc7, 0x9b, 0xfd, 0xfa, 0x1b, 0x9b, 0xb7, 0x31, 0x11, 0x55, 0x53, 0x29, 0x53, 0xd6, 0x15,
	0x24, 0x7a, 0x21, 0x56, 0x01, 0x09, 0x4e, 0x48, 0x2b, 0x4c, 0xda, 0x0d, 0x14, 0x2a, 0x81, 0xb8,
	0x4c, 0x8e, 0xf3, 0xd6, 0x58, 0x6d, 0xec, 0xca, 0x76, 0xb2, 0xed, 0x2f, 0xe0, 0xca, 0x5f, 0xc4,
	0x79, 0xc7, 0x1d, 0x39, 0x4d, 0xa8, 0xfd, 0x2f, 0x38, 0x21, 0x3b, 0xce, 0x48, 0xab, 0x71, 0xe3,
	0x94, 0xf7, 0x9c, 0xaf, 0xdf, 0xf7, 0xbd, 0x8f, 0x6d, 0xd4, 0x67, 0x31, 0xc5, 0x64, 0x36, 0x9b,
	0x32, 0x4a, 0x34, 0x13, 0x5c, 0x61, 0x2d, 0x09, 0x57, 0x67, 0x20, 0x71, 0x31, 0xc0, 0x50, 0x00,
	0xd7, 0xe1, 0x4c, 0x0a, 0x2d, 0xfc, 0x7d, 0x16, 0xd3, 0xb0, 0xae, 0x0c, 0x2b, 0x65, 0x58, 0x0c,
	0x3a, 0xad, 0xb1, 0x18, 0x0b, 0x2b, 0xc4, 0x26, 0x2a, 0xf7, 0x74, 0x0e, 0x4d, 0x75, 0x2a, 0x24,
	0x60, 0x9a, 0x12, 0xce, 0x61, 0x6a, 0x8a, 0xba, 0xb0, 0x94, 0xf4, 0xce, 0xd1, 0x83, 0x63, 0xe3,
	0xf2, 0x9e, 0x47, 0x40, 0x8b, 0x0f, 0x84, 0x4e, 0x40, 0xfb, 0x1d, 0xb4, 0x21, 0x81, 0x02, 0x2b,
	0x40, 0xb6, 0xbd, 0xae, 0xd7, 0xdf, 0x8c, 0x6e, 0x73, 0xbf, 0x85, 0xfe, 0x4f, 0x80, 0x8b, 0xac,
	0xbd, 0x66, 0x7f, 0x94, 0x89, 0xbf, 0x87, 0xd6, 0x49, 0x26, 0x72, 0xae, 0xdb, 0xff, 0x75, 0xbd,
	0x7e, 0x33, 0x72, 0x99, 0xdf, 0x46, 0xf7, 0x54, 0x4e, 0x29, 0x28, 0xd5, 0x6e, 0x76, 0xbd, 0xfe,
	0x46, 0x54, 0xa5, 0xbd, 0xef, 0x1e, 0xda, 0x77, 0xce, 0x47, 0x74, 0xc2, 0xc5, 0xf9, 0x14, 0x92,
	0x31, 0x64, 0xc0, 0xf5, 0x3f, 0x6f, 0x62, 0x84, 0x76, 0xc9, 0xb2, 0x85, 0x6d, 0x66, 0xeb, 0xf9,
	0x93, 0xd0, 0x40, 0x35, 0x80, 0xc2, 0x8a, 0x4a, 0x31, 0x08, 0x57, 0xda, 0x19, 0x36, 0xaf, 0x6e,
	0x0e, 0x1a, 0xd1, 0x6a, 0x89, 0xde, 0x2b, 0xf4, 0xc8, 0xf6, 0xbf, 0x22, 0xff, 0x58, 0xce, 0x57,
	0x9f, 0xdc, 0x74, 0xbf, 0xfd, 0x67, 0xf2, 0x01, 0x7a, 0x78, 0xd7, 0xc6, 0x63, 0x29, 0x85, 0x9d,
	0x0c, 0x4c, 0xe0, 0x46, 0x2e, 0x93, 0xde, 0x57, 0x0f, 0xb5, 0x1c, 0xac, 0x11, 0xcb, 0x40, 0xe4,
	0x15, 0xa4, 0xa7, 0x68, 0x57, 0xc2, 0x59, 0xce, 0x93, 0xd3, 0x15, 0x56, 0xf7, 0xcb, 0xe5, 0xa8,
	0x22, 0x76, 0x88, 0xb6, 0x9d, 0xb0, 0x0e, 0x6e, 0xab, 0x5c, 0x7b, 0x67, 0xf1, 0x3d, 0x46, 0x3b,
	0x4e, 0xb2, 0x44, 0xd1, 0xed, 0x3b, 0xb2, 0x6b, 0xbd, 0xb7, 0x68, 0xc7, 0x36, 0x32, 0x72, 0x97,
	0xcf, 0x40, 0x57, 0xc0, 0x93, 0x5b, 0x63, 0x97, 0x2d, 0x1d, 0xdf, 0xda, 0xf2, 0xf1, 0x99, 0x71,
	0xf6, 0x6c, 0x15, 0x6b, 0xcc, 0xb8, 0xbd, 0xd0, 0x23, 0x49, 0x28, 0xf8, 0x9f, 0x10, 0xd2, 0x26,
	0x38, 0x4d, 0x89, 0x4a, 0x4b, 0x72, 0xc3, 0xd7, 0xbf, 0x6e, 0x0e, 0x5e, 0x8e, 0x99, 0x4e, 0xf3,
	0x38, 0xa4, 0x22, 0xc3, 0xda, 0x3a, 0x64, 0x8c, 0xeb, 0x7a, 0x38, 0x65, 0xb1, 0xc2, 0xf1, 0xa5,
	0x06, 0x15, 0x9e, 0xc0, 0xc5, 0xd0, 0x04, 0xd1, 0xa6, 0xad, 0x75, 0x42, 0x54, 0x7a, 0xf7, 0x95,
	0x19, 0x7e, 0xbe, 0x9a, 0x07, 0xde, 0xf5, 0x3c, 0xf0, 0x7e, 0xce, 0x03, 0xef, 0xdb, 0x22, 0x68,
	0x5c, 0x2f, 0x82, 0xc6, 0x8f, 0x45, 0xd0, 0xf8, 0xf2, 0xa6, 0x66, 0x48, 0x85, 0xca, 0x84, 0x72,
	0x9f, 0x67, 0x2a, 0x99, 0xe0, 0x0b, 0xfc, 0xf7, 0x87, 0xab, 0x2f, 0x67, 0xa0, 0xe2, 0x75, 0xfb,
	0xbe, 0x5e, 0xfc, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xe6, 0xcd, 0x4b, 0x11, 0xe2, 0x03, 0x00, 0x00,
}

func (m *EventOnRecvPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventOnRecvPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventOnRecvPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Amount != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventOnAcknowledgementPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventOnAcknowledgementPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventOnAcknowledgementPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Acknowledgement.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.Amount != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventAcknowledgementSuccess) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAcknowledgementSuccess) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAcknowledgementSuccess) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Success) > 0 {
		i -= len(m.Success)
		copy(dAtA[i:], m.Success)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Success)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventAcknowledgementError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAcknowledgementError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAcknowledgementError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventOnTimeoutPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventOnTimeoutPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventOnTimeoutPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RefundAmount != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.RefundAmount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RefundDenom) > 0 {
		i -= len(m.RefundDenom)
		copy(dAtA[i:], m.RefundDenom)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.RefundDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RefundReceiver) > 0 {
		i -= len(m.RefundReceiver)
		copy(dAtA[i:], m.RefundReceiver)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.RefundReceiver)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventDenominationTrace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDenominationTrace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventDenominationTrace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TraceHash) > 0 {
		i -= len(m.TraceHash)
		copy(dAtA[i:], m.TraceHash)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.TraceHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventOnRecvPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovEvent(uint64(m.Amount))
	}
	if m.Success {
		n += 2
	}
	return n
}

func (m *EventOnAcknowledgementPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovEvent(uint64(m.Amount))
	}
	l = m.Acknowledgement.Size()
	n += 1 + l + sovEvent(uint64(l))
	return n
}

func (m *EventAcknowledgementSuccess) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Success)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventAcknowledgementError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventOnTimeoutPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RefundReceiver)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.RefundDenom)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.RefundAmount != 0 {
		n += 1 + sovEvent(uint64(m.RefundAmount))
	}
	return n
}

func (m *EventTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventDenominationTrace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TraceHash)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventOnRecvPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventOnRecvPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventOnRecvPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventOnAcknowledgementPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventOnAcknowledgementPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventOnAcknowledgementPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Acknowledgement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Acknowledgement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAcknowledgementSuccess) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAcknowledgementSuccess: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAcknowledgementSuccess: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Success = append(m.Success[:0], dAtA[iNdEx:postIndex]...)
			if m.Success == nil {
				m.Success = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAcknowledgementError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAcknowledgementError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAcknowledgementError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventOnTimeoutPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventOnTimeoutPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventOnTimeoutPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundReceiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefundReceiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefundDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundAmount", wireType)
			}
			m.RefundAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefundAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDenominationTrace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDenominationTrace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDenominationTrace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraceHash = append(m.TraceHash[:0], dAtA[iNdEx:postIndex]...)
			if m.TraceHash == nil {
				m.TraceHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
