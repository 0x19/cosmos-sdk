// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/applications/convo/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryPendingMessageRequest is the request type for the Query/PendingMessage RPC method
type QueryPendingMessageRequest struct {
	// sender address
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// receiver address
	Receiver string `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	// channel identifier for sender chain
	Channel string `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (m *QueryPendingMessageRequest) Reset()         { *m = QueryPendingMessageRequest{} }
func (m *QueryPendingMessageRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPendingMessageRequest) ProtoMessage()    {}
func (*QueryPendingMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_20d7c22b19ab279c, []int{0}
}
func (m *QueryPendingMessageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingMessageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingMessageRequest.Merge(m, src)
}
func (m *QueryPendingMessageRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingMessageRequest proto.InternalMessageInfo

func (m *QueryPendingMessageRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *QueryPendingMessageRequest) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *QueryPendingMessageRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

// QueryPendingMessageResponse is the response type for the Query/PendingMessage RPC method
type QueryPendingMessageResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *QueryPendingMessageResponse) Reset()         { *m = QueryPendingMessageResponse{} }
func (m *QueryPendingMessageResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPendingMessageResponse) ProtoMessage()    {}
func (*QueryPendingMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_20d7c22b19ab279c, []int{1}
}
func (m *QueryPendingMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingMessageResponse.Merge(m, src)
}
func (m *QueryPendingMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingMessageResponse proto.InternalMessageInfo

func (m *QueryPendingMessageResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// QueryInboxMessageRequest is the request type for the Query/InboxMessage RPC method
type QueryInboxMessageRequest struct {
	// sender address
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// receiver address
	Receiver string `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	// channel identifier for destination chain
	Channel string `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (m *QueryInboxMessageRequest) Reset()         { *m = QueryInboxMessageRequest{} }
func (m *QueryInboxMessageRequest) String() string { return proto.CompactTextString(m) }
func (*QueryInboxMessageRequest) ProtoMessage()    {}
func (*QueryInboxMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_20d7c22b19ab279c, []int{2}
}
func (m *QueryInboxMessageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInboxMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInboxMessageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInboxMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInboxMessageRequest.Merge(m, src)
}
func (m *QueryInboxMessageRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryInboxMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInboxMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInboxMessageRequest proto.InternalMessageInfo

func (m *QueryInboxMessageRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *QueryInboxMessageRequest) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *QueryInboxMessageRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

// QueryInboxMessageResponse is the response type for the Query/InboxMessage RPC method
type QueryInboxMessageResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *QueryInboxMessageResponse) Reset()         { *m = QueryInboxMessageResponse{} }
func (m *QueryInboxMessageResponse) String() string { return proto.CompactTextString(m) }
func (*QueryInboxMessageResponse) ProtoMessage()    {}
func (*QueryInboxMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_20d7c22b19ab279c, []int{3}
}
func (m *QueryInboxMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInboxMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInboxMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInboxMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInboxMessageResponse.Merge(m, src)
}
func (m *QueryInboxMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInboxMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInboxMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInboxMessageResponse proto.InternalMessageInfo

func (m *QueryInboxMessageResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// QueryOutboxMessageRequest is the request type for the Query/OutboxMessage RPC method
type QueryOutboxMessageRequest struct {
	// sender address
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// receiver address
	Receiver string `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	// channel identifier for sender chain
	Channel string `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (m *QueryOutboxMessageRequest) Reset()         { *m = QueryOutboxMessageRequest{} }
func (m *QueryOutboxMessageRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOutboxMessageRequest) ProtoMessage()    {}
func (*QueryOutboxMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_20d7c22b19ab279c, []int{4}
}
func (m *QueryOutboxMessageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOutboxMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOutboxMessageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOutboxMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOutboxMessageRequest.Merge(m, src)
}
func (m *QueryOutboxMessageRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOutboxMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOutboxMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOutboxMessageRequest proto.InternalMessageInfo

func (m *QueryOutboxMessageRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *QueryOutboxMessageRequest) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *QueryOutboxMessageRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

// QueryOutboxMessageResponse is the response type for the Query/OutboxMessage RPC method
type QueryOutboxMessageResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *QueryOutboxMessageResponse) Reset()         { *m = QueryOutboxMessageResponse{} }
func (m *QueryOutboxMessageResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOutboxMessageResponse) ProtoMessage()    {}
func (*QueryOutboxMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_20d7c22b19ab279c, []int{5}
}
func (m *QueryOutboxMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOutboxMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOutboxMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOutboxMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOutboxMessageResponse.Merge(m, src)
}
func (m *QueryOutboxMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOutboxMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOutboxMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOutboxMessageResponse proto.InternalMessageInfo

func (m *QueryOutboxMessageResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryPendingMessageRequest)(nil), "ibc.applications.convo.v1.QueryPendingMessageRequest")
	proto.RegisterType((*QueryPendingMessageResponse)(nil), "ibc.applications.convo.v1.QueryPendingMessageResponse")
	proto.RegisterType((*QueryInboxMessageRequest)(nil), "ibc.applications.convo.v1.QueryInboxMessageRequest")
	proto.RegisterType((*QueryInboxMessageResponse)(nil), "ibc.applications.convo.v1.QueryInboxMessageResponse")
	proto.RegisterType((*QueryOutboxMessageRequest)(nil), "ibc.applications.convo.v1.QueryOutboxMessageRequest")
	proto.RegisterType((*QueryOutboxMessageResponse)(nil), "ibc.applications.convo.v1.QueryOutboxMessageResponse")
}

func init() {
	proto.RegisterFile("ibc/applications/convo/v1/query.proto", fileDescriptor_20d7c22b19ab279c)
}

var fileDescriptor_20d7c22b19ab279c = []byte{
	// 464 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0x41, 0x6b, 0xd4, 0x40,
	0x14, 0xc7, 0x77, 0x2a, 0xad, 0x3a, 0xa8, 0x87, 0x39, 0x48, 0x1a, 0x25, 0x48, 0x40, 0xf0, 0x62,
	0x1e, 0x6b, 0xdd, 0x7a, 0xf0, 0xe6, 0xcd, 0x83, 0xa8, 0x05, 0xb5, 0xf6, 0xe0, 0x9a, 0xcc, 0x3e,
	0xb2, 0xa3, 0xbb, 0x33, 0x69, 0x66, 0x12, 0x5a, 0x96, 0xbd, 0xf8, 0x09, 0x04, 0x3f, 0x84, 0x5f,
	0xc5, 0x63, 0xc1, 0x8b, 0x1e, 0x04, 0xdd, 0xf5, 0x83, 0xc8, 0x4e, 0x26, 0xa5, 0xad, 0x59, 0xc2,
	0x52, 0x7a, 0x9a, 0x79, 0x99, 0xf9, 0xe5, 0xfd, 0xff, 0xef, 0x3d, 0x86, 0xde, 0x15, 0x09, 0x87,
	0x38, 0xcb, 0x46, 0x82, 0xc7, 0x46, 0x28, 0xa9, 0x81, 0x2b, 0x59, 0x2a, 0x28, 0xbb, 0xb0, 0x5f,
	0x60, 0x7e, 0x18, 0x65, 0xb9, 0x32, 0x8a, 0x6d, 0x8a, 0x84, 0x47, 0x27, 0xaf, 0x45, 0xf6, 0x5a,
	0x54, 0x76, 0xfd, 0xdb, 0xa9, 0x52, 0xe9, 0x08, 0x21, 0xce, 0x04, 0xc4, 0x52, 0x2a, 0xe3, 0x2e,
	0x58, 0x30, 0xfc, 0x40, 0xfd, 0x97, 0x8b, 0xff, 0xbc, 0x40, 0x39, 0x10, 0x32, 0x7d, 0x86, 0x5a,
	0xc7, 0x29, 0xee, 0xe0, 0x7e, 0x81, 0xda, 0xb0, 0x9b, 0x74, 0x43, 0xa3, 0x1c, 0x60, 0xee, 0x91,
	0x3b, 0xe4, 0xde, 0xd5, 0x1d, 0x17, 0x31, 0x9f, 0x5e, 0xc9, 0x91, 0xa3, 0x28, 0x31, 0xf7, 0xd6,
	0xec, 0xc9, 0x71, 0xcc, 0x3c, 0x7a, 0x99, 0x0f, 0x63, 0x29, 0x71, 0xe4, 0x5d, 0xb2, 0x47, 0x75,
	0x18, 0x3e, 0xa2, 0xb7, 0x1a, 0x73, 0xe9, 0x4c, 0x49, 0x8d, 0x0b, 0x70, 0x5c, 0x7d, 0x72, 0xd9,
	0xea, 0x30, 0x1c, 0x52, 0xcf, 0x82, 0x4f, 0x65, 0xa2, 0x0e, 0x2e, 0x54, 0x62, 0x8f, 0x6e, 0x36,
	0x64, 0x6a, 0x15, 0x28, 0x1c, 0xf6, 0xbc, 0x30, 0x17, 0xad, 0x70, 0xdb, 0x35, 0xec, 0x4c, 0xaa,
	0x36, 0x89, 0x0f, 0xbe, 0xae, 0xd3, 0x75, 0x0b, 0xb2, 0x3f, 0x84, 0xde, 0x38, 0xdd, 0x02, 0xd6,
	0x8b, 0x96, 0xce, 0x4f, 0xb4, 0x7c, 0x3c, 0xfc, 0xed, 0x55, 0xb1, 0x4a, 0x65, 0xf8, 0xfe, 0xd3,
	0xf7, 0xbf, 0x5f, 0xd6, 0xf6, 0xd8, 0x2e, 0x88, 0x84, 0xf7, 0xeb, 0x81, 0x4e, 0xd0, 0xc4, 0x5d,
	0xc8, 0x2a, 0xa4, 0xef, 0x74, 0x43, 0x55, 0x2c, 0x98, 0x54, 0xeb, 0x14, 0xea, 0x12, 0xc1, 0xa4,
	0xde, 0x4d, 0xc1, 0xd5, 0x06, 0x26, 0x6e, 0x33, 0x65, 0x3f, 0x09, 0xbd, 0x76, 0xb2, 0x87, 0x6c,
	0xab, 0x4d, 0x6a, 0xc3, 0x6c, 0xf9, 0x0f, 0x57, 0x83, 0x9c, 0xbb, 0x77, 0xd6, 0xdd, 0x2e, 0x7b,
	0xdd, 0xe0, 0x4e, 0x2c, 0x80, 0x63, 0x6f, 0x4d, 0x5e, 0xce, 0xfa, 0xfd, 0xdf, 0xdb, 0x2f, 0x42,
	0xaf, 0x9f, 0xea, 0x3e, 0x6b, 0xd5, 0xd9, 0x34, 0x97, 0x7e, 0x6f, 0x45, 0xca, 0xd9, 0xeb, 0x5b,
	0x7b, 0x6f, 0xd9, 0x9b, 0x06, 0x7b, 0xca, 0x12, 0xe7, 0xeb, 0xdd, 0x93, 0x57, 0xdf, 0x66, 0x01,
	0x39, 0x9a, 0x05, 0xe4, 0xf7, 0x2c, 0x20, 0x9f, 0xe7, 0x41, 0xe7, 0x68, 0x1e, 0x74, 0x7e, 0xcc,
	0x83, 0xce, 0xde, 0xe3, 0x54, 0x98, 0x61, 0x91, 0x44, 0x5c, 0x8d, 0x81, 0x2b, 0x3d, 0x56, 0xda,
	0x2d, 0xf7, 0xf5, 0xe0, 0x23, 0x1c, 0xc0, 0x92, 0xb7, 0xd2, 0x1c, 0x66, 0xa8, 0x93, 0x0d, 0xfb,
	0xe0, 0x6d, 0xfd, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xfe, 0xba, 0xd6, 0xad, 0x52, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// PendingMessage queries the pending message of a sender-receiver convo over a given channel
	PendingMessage(ctx context.Context, in *QueryPendingMessageRequest, opts ...grpc.CallOption) (*QueryPendingMessageResponse, error)
	// InboxMessage queries the inbox message of a receiver from a sender over a given channel
	InboxMessage(ctx context.Context, in *QueryInboxMessageRequest, opts ...grpc.CallOption) (*QueryInboxMessageResponse, error)
	// OutboxMessage queries the outbox message of a sender to a receiver over a given channel
	OutboxMessage(ctx context.Context, in *QueryOutboxMessageRequest, opts ...grpc.CallOption) (*QueryOutboxMessageResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) PendingMessage(ctx context.Context, in *QueryPendingMessageRequest, opts ...grpc.CallOption) (*QueryPendingMessageResponse, error) {
	out := new(QueryPendingMessageResponse)
	err := c.cc.Invoke(ctx, "/ibc.applications.convo.v1.Query/PendingMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InboxMessage(ctx context.Context, in *QueryInboxMessageRequest, opts ...grpc.CallOption) (*QueryInboxMessageResponse, error) {
	out := new(QueryInboxMessageResponse)
	err := c.cc.Invoke(ctx, "/ibc.applications.convo.v1.Query/InboxMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OutboxMessage(ctx context.Context, in *QueryOutboxMessageRequest, opts ...grpc.CallOption) (*QueryOutboxMessageResponse, error) {
	out := new(QueryOutboxMessageResponse)
	err := c.cc.Invoke(ctx, "/ibc.applications.convo.v1.Query/OutboxMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// PendingMessage queries the pending message of a sender-receiver convo over a given channel
	PendingMessage(context.Context, *QueryPendingMessageRequest) (*QueryPendingMessageResponse, error)
	// InboxMessage queries the inbox message of a receiver from a sender over a given channel
	InboxMessage(context.Context, *QueryInboxMessageRequest) (*QueryInboxMessageResponse, error)
	// OutboxMessage queries the outbox message of a sender to a receiver over a given channel
	OutboxMessage(context.Context, *QueryOutboxMessageRequest) (*QueryOutboxMessageResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) PendingMessage(ctx context.Context, req *QueryPendingMessageRequest) (*QueryPendingMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingMessage not implemented")
}
func (*UnimplementedQueryServer) InboxMessage(ctx context.Context, req *QueryInboxMessageRequest) (*QueryInboxMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InboxMessage not implemented")
}
func (*UnimplementedQueryServer) OutboxMessage(ctx context.Context, req *QueryOutboxMessageRequest) (*QueryOutboxMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutboxMessage not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_PendingMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPendingMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.applications.convo.v1.Query/PendingMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingMessage(ctx, req.(*QueryPendingMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InboxMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInboxMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InboxMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.applications.convo.v1.Query/InboxMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InboxMessage(ctx, req.(*QueryInboxMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OutboxMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOutboxMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OutboxMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.applications.convo.v1.Query/OutboxMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OutboxMessage(ctx, req.(*QueryOutboxMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ibc.applications.convo.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PendingMessage",
			Handler:    _Query_PendingMessage_Handler,
		},
		{
			MethodName: "InboxMessage",
			Handler:    _Query_InboxMessage_Handler,
		},
		{
			MethodName: "OutboxMessage",
			Handler:    _Query_OutboxMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ibc/applications/convo/v1/query.proto",
}

func (m *QueryPendingMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingMessageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingMessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryInboxMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInboxMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInboxMessageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryInboxMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInboxMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInboxMessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOutboxMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOutboxMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOutboxMessageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOutboxMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOutboxMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOutboxMessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryPendingMessageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPendingMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryInboxMessageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryInboxMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOutboxMessageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOutboxMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryPendingMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInboxMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInboxMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInboxMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInboxMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInboxMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInboxMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOutboxMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOutboxMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOutboxMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOutboxMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOutboxMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOutboxMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
