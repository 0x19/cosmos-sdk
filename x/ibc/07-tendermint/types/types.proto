syntax = "proto3";
package cosmos_sdk.x.ibc.tendermint.v1;

option go_package = "github.com/cosmos/cosmos-sdk/x/ibc/07-tendermint/types";

import "third_party/proto/gogoproto/gogo.proto";
import "third_party/proto/tendermint/abci/types/types.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "x/ibc/23-commitment/types/types.proto";

// MsgCreateClient defines a message to create a tendermint client state.
message MsgCreateClient {
  option (gogoproto.goproto_getters) = false;

  string client_id = 1 [
    (gogoproto.customname) = "ClientID",
    (gogoproto.moretags)   = "yaml:\"client_id\""
  ];
  Header header = 2 [
    (gogoproto.nullable) = false
  ];
  google.protobuf.Duration trusting_period = 3 [
    (gogoproto.nullable)    = false,
    (gogoproto.stdduration) = true,
    (gogoproto.moretags)    = "yaml:\"trusting_period\""
  ];
  google.protobuf.Duration unbonding_period = 4 [
    (gogoproto.nullable)    = false,
    (gogoproto.stdduration) = true,
    (gogoproto.moretags)    = "yaml:\"unbonding_period\""
  ];
  bytes signer = 5 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"
  ];
}

// MsgCreateClient defines an sdk.Msg to update a tendermint client state to
// the given header.
message MsgUpdateClient {
  option (gogoproto.goproto_getters) = false;

  string client_id = 1 [
    (gogoproto.customname) = "ClientID",
    (gogoproto.moretags)   = "yaml:\"client_id\""
  ];
  Header header = 2 [
    (gogoproto.nullable) = false
  ];
  bytes signer = 3 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"
  ];
}

// MsgSubmitClientMisbehaviour defines an sdk.Msg type that submits Evidence for
// light client misbehaviour.
message MsgSubmitClientMisbehaviour {
  option (gogoproto.goproto_getters) = false;

  Evidence evidence  = 1;
  bytes    submitter = 2 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"
  ];
}

// ClientState defines a Tendermint consensus light client state.
message ClientState {
  option (gogoproto.goproto_getters) = false;

  string id = 1 [(gogoproto.customname) = "ID"];
  // duration of the period since the LastestTimestamp during which the submitted
  // headers are valid for upgrade
  google.protobuf.Duration trusting_period = 2 [
    (gogoproto.nullable)    = false,
    (gogoproto.stdduration) = true,
    (gogoproto.moretags)    = "yaml:\"trusting_period\""
  ];
  // duration of the staking unbonding period
  google.protobuf.Duration unbonding_period = 3 [
    (gogoproto.nullable)    = false,
    (gogoproto.stdduration) = true,
    (gogoproto.moretags)    = "yaml:\"unbonding_period\""
  ];
  // Block height when the client was frozen due to a misbehaviour
  uint64 frozen_height = 4 [
    (gogoproto.moretags) = "yaml:\"frozen_height\""
  ];
  // Last Header that was stored by the client
  Header last_header = 5 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"last_header\""
  ];
}

// ConsensusState defines the consensus state from Tendermint.
message ConsensusState {
  option (gogoproto.goproto_getters) = false;

  // timestamp that corresponds to the block height in which the ConsensusState
  // was stored.
  google.protobuf.Timestamp timestamp = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime)  = true
  ];
  // commitment root (i.e app hash)
  cosmos_sdk.x.ibc.commitment.v1.MerkleRoot root = 2 [
    (gogoproto.nullable) = false
  ];
  // height at which the consensus state was stored.
  uint64       height        = 3;
  ValidatorSet validator_set = 4 [
    (gogoproto.moretags) = "yaml:\"validator_set\""
  ];
}

// Evidence defines two distinct headers at the same hight, chain id and client.
// It is used to verify and penalize light client misbehaviour.
message Evidence {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_getters)  = false;
  option (gogoproto.goproto_stringer) = false;

  string client_id = 1 [
    (gogoproto.customname) = "ClientID",
    (gogoproto.moretags)   = "yaml:\"client_id\""
  ];
  string chain_id = 2 [
    (gogoproto.customname) = "ChainID",
    (gogoproto.moretags)   = "yaml:\"chain_id\""
  ];
  Header header_1 = 3 [
    (gogoproto.customname) = "Header1",
    (gogoproto.nullable)   = false,
    (gogoproto.moretags)   = "yaml:\"header_1\""
  ];
  Header header_2 = 4 [
    (gogoproto.customname) = "Header2",
    (gogoproto.nullable)   = false,
    (gogoproto.moretags)   = "yaml:\"header_2\""
  ];
}

// Header defines a tendermint signed header and the validator set that
// corresponds to the header.
message Header {
  option (gogoproto.equal) = true;

  SignedHeader signed_header = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"signed_header\""
  ];

  ValidatorSet validator_set = 2 [
    (gogoproto.moretags) = "yaml:\"validator_set\""
  ];
}

// TODO: move to tendermint
message ValidatorSet {
  option (gogoproto.equal) = true;

  repeated .tendermint.abci.types.Validator validators         = 1;
  .tendermint.abci.types.Validator          proposer           = 2;
  int64                                     total_voting_power = 3 [
    (gogoproto.customname) = "totalVotingPower",
    (gogoproto.moretags)   = "yaml:\"total_voting_power\""
  ];
}

// TODO: move to tendermint
message SignedHeader {
  option (gogoproto.equal) = true;

  .tendermint.abci.types.Header header = 1;
  Commit                        commit = 2 [(gogoproto.nullable) = false];
}

// Commit contains the evidence that a block was committed by a set of validators.
// NOTE: Commit is empty for height 1, but never nil.
message Commit {
  option (gogoproto.equal) = true;

  // NOTE: The signatures are in order of address to preserve the bonded
  // ValidatorSet order.
  // Any peer with a block can gossip signatures by index with a peer without
  // recalculating the active ValidatorSet.
  int64              height     = 1;
  int32              round      = 2;
  BlockID            block_id   = 3 [(gogoproto.customname) = "BlockID"];
  repeated CommitSig signatures = 4;
  bytes              hash       = 5 [
    (gogoproto.customname) = "hash",
    (gogoproto.casttype)   = "github.com/tendermint/tendermint/libs/bytes.HexBytes"
  ];
  bytes bit_array = 6 [(gogoproto.customname) = "bitArray"];
}

message BlockID {
  option (gogoproto.equal) = true;

  bytes hash = 1 [
    (gogoproto.casttype) = "github.com/tendermint/tendermint/libs/bytes.HexBytes"
  ];
  PartsHeader parts_header = 2 [
    (gogoproto.moretags) = "yaml:\"parts_header\""
  ];
}

message PartsHeader {
  option (gogoproto.equal) = true;

  int32 total = 1;
  bytes hash  = 2 [
    (gogoproto.casttype) = "github.com/tendermint/tendermint/libs/bytes.HexBytes"
  ];
}

message CommitSig {
  option (gogoproto.equal) = true;

  bytes block_id_flag = 1 [
    (gogoproto.customname) = "BlockIDFlag"
  ];
  bytes validator_address = 2 [
    (gogoproto.casttype) = "github.com/tendermint/tendermint/types.Address"
  ];
  google.protobuf.Timestamp timestamp = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime)  = true
  ];
  bytes signature = 4;
}
