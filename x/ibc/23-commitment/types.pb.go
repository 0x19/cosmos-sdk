// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: x/ibc/23-commitment/types.proto

package _23_commitment

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_x_ibc_23_commitment "github.com/cosmos/cosmos-sdk/x/ibc/23-commitment"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	github_com_tendermint_tendermint_crypto_merkle "github.com/tendermint/tendermint/crypto/merkle"
	merkle "github.com/tendermint/tendermint/crypto/merkle"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RootI struct {
	// sum defines a list of all acceptable concrete Root implementations.
	//
	// Types that are valid to be assigned to Sum:
	//	*RootI_Merkle
	Sum isRootI_Sum `protobuf_oneof:"sum"`
}

func (m *RootI) Reset()         { *m = RootI{} }
func (m *RootI) String() string { return proto.CompactTextString(m) }
func (*RootI) ProtoMessage()    {}
func (*RootI) Descriptor() ([]byte, []int) {
	return fileDescriptor_43bdf3d6f35e5b7d, []int{0}
}
func (m *RootI) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RootI) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RootI.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RootI) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RootI.Merge(m, src)
}
func (m *RootI) XXX_Size() int {
	return m.Size()
}
func (m *RootI) XXX_DiscardUnknown() {
	xxx_messageInfo_RootI.DiscardUnknown(m)
}

var xxx_messageInfo_RootI proto.InternalMessageInfo

type isRootI_Sum interface {
	isRootI_Sum()
	MarshalTo([]byte) (int, error)
	Size() int
}

type RootI_Merkle struct {
	Merkle *Root `protobuf:"bytes,1,opt,name=merkle,proto3,oneof" json:"merkle,omitempty"`
}

func (*RootI_Merkle) isRootI_Sum() {}

func (m *RootI) GetSum() isRootI_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *RootI) GetMerkle() *Root {
	if x, ok := m.GetSum().(*RootI_Merkle); ok {
		return x.Merkle
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RootI) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RootI_Merkle)(nil),
	}
}

type PrefixI struct {
	// Types that are valid to be assigned to Sum:
	//	*PrefixI_Merkle
	Sum isPrefixI_Sum `protobuf_oneof:"sum"`
}

func (m *PrefixI) Reset()         { *m = PrefixI{} }
func (m *PrefixI) String() string { return proto.CompactTextString(m) }
func (*PrefixI) ProtoMessage()    {}
func (*PrefixI) Descriptor() ([]byte, []int) {
	return fileDescriptor_43bdf3d6f35e5b7d, []int{1}
}
func (m *PrefixI) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrefixI) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrefixI.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrefixI) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrefixI.Merge(m, src)
}
func (m *PrefixI) XXX_Size() int {
	return m.Size()
}
func (m *PrefixI) XXX_DiscardUnknown() {
	xxx_messageInfo_PrefixI.DiscardUnknown(m)
}

var xxx_messageInfo_PrefixI proto.InternalMessageInfo

type isPrefixI_Sum interface {
	isPrefixI_Sum()
	MarshalTo([]byte) (int, error)
	Size() int
}

type PrefixI_Merkle struct {
	Merkle *Prefix `protobuf:"bytes,1,opt,name=merkle,proto3,oneof" json:"merkle,omitempty"`
}

func (*PrefixI_Merkle) isPrefixI_Sum() {}

func (m *PrefixI) GetSum() isPrefixI_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *PrefixI) GetMerkle() *Prefix {
	if x, ok := m.GetSum().(*PrefixI_Merkle); ok {
		return x.Merkle
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PrefixI) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PrefixI_Merkle)(nil),
	}
}

type PathI struct {
	// sum defines a list of all acceptable concrete Path implementations.
	//
	// Types that are valid to be assigned to Sum:
	//	*PathI_Merkle
	Sum isPathI_Sum `protobuf_oneof:"sum"`
}

func (m *PathI) Reset()         { *m = PathI{} }
func (m *PathI) String() string { return proto.CompactTextString(m) }
func (*PathI) ProtoMessage()    {}
func (*PathI) Descriptor() ([]byte, []int) {
	return fileDescriptor_43bdf3d6f35e5b7d, []int{2}
}
func (m *PathI) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PathI) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PathI.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PathI) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PathI.Merge(m, src)
}
func (m *PathI) XXX_Size() int {
	return m.Size()
}
func (m *PathI) XXX_DiscardUnknown() {
	xxx_messageInfo_PathI.DiscardUnknown(m)
}

var xxx_messageInfo_PathI proto.InternalMessageInfo

type isPathI_Sum interface {
	isPathI_Sum()
	MarshalTo([]byte) (int, error)
	Size() int
}

type PathI_Merkle struct {
	Merkle *Path `protobuf:"bytes,1,opt,name=merkle,proto3,oneof" json:"merkle,omitempty"`
}

func (*PathI_Merkle) isPathI_Sum() {}

func (m *PathI) GetSum() isPathI_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *PathI) GetMerkle() *Path {
	if x, ok := m.GetSum().(*PathI_Merkle); ok {
		return x.Merkle
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PathI) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PathI_Merkle)(nil),
	}
}

type ProofI struct {
	// sum defines a list of all acceptable concrete Proof implementations.
	//
	// Types that are valid to be assigned to Sum:
	//	*ProofI_Merkle
	Sum isProofI_Sum `protobuf_oneof:"sum"`
}

func (m *ProofI) Reset()         { *m = ProofI{} }
func (m *ProofI) String() string { return proto.CompactTextString(m) }
func (*ProofI) ProtoMessage()    {}
func (*ProofI) Descriptor() ([]byte, []int) {
	return fileDescriptor_43bdf3d6f35e5b7d, []int{3}
}
func (m *ProofI) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProofI) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProofI.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProofI) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProofI.Merge(m, src)
}
func (m *ProofI) XXX_Size() int {
	return m.Size()
}
func (m *ProofI) XXX_DiscardUnknown() {
	xxx_messageInfo_ProofI.DiscardUnknown(m)
}

var xxx_messageInfo_ProofI proto.InternalMessageInfo

type isProofI_Sum interface {
	isProofI_Sum()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProofI_Merkle struct {
	Merkle *Proof `protobuf:"bytes,1,opt,name=merkle,proto3,oneof" json:"merkle,omitempty"`
}

func (*ProofI_Merkle) isProofI_Sum() {}

func (m *ProofI) GetSum() isProofI_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *ProofI) GetMerkle() *Proof {
	if x, ok := m.GetSum().(*ProofI_Merkle); ok {
		return x.Merkle
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ProofI) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ProofI_Merkle)(nil),
	}
}

type Root struct {
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *Root) Reset()         { *m = Root{} }
func (m *Root) String() string { return proto.CompactTextString(m) }
func (*Root) ProtoMessage()    {}
func (*Root) Descriptor() ([]byte, []int) {
	return fileDescriptor_43bdf3d6f35e5b7d, []int{4}
}
func (m *Root) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Root) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Root.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Root) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Root.Merge(m, src)
}
func (m *Root) XXX_Size() int {
	return m.Size()
}
func (m *Root) XXX_DiscardUnknown() {
	xxx_messageInfo_Root.DiscardUnknown(m)
}

var xxx_messageInfo_Root proto.InternalMessageInfo

func (m *Root) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type Prefix struct {
	KeyPrefix []byte `protobuf:"bytes,1,opt,name=key_prefix,json=keyPrefix,proto3" json:"key_prefix,omitempty"`
}

func (m *Prefix) Reset()         { *m = Prefix{} }
func (m *Prefix) String() string { return proto.CompactTextString(m) }
func (*Prefix) ProtoMessage()    {}
func (*Prefix) Descriptor() ([]byte, []int) {
	return fileDescriptor_43bdf3d6f35e5b7d, []int{5}
}
func (m *Prefix) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Prefix) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Prefix.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Prefix) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Prefix.Merge(m, src)
}
func (m *Prefix) XXX_Size() int {
	return m.Size()
}
func (m *Prefix) XXX_DiscardUnknown() {
	xxx_messageInfo_Prefix.DiscardUnknown(m)
}

var xxx_messageInfo_Prefix proto.InternalMessageInfo

func (m *Prefix) GetKeyPrefix() []byte {
	if m != nil {
		return m.KeyPrefix
	}
	return nil
}

type Path struct {
	KeyPath github_com_tendermint_tendermint_crypto_merkle.KeyPath `protobuf:"bytes,1,rep,name=key_path,json=keyPath,proto3,castrepeated=github.com/tendermint/tendermint/crypto/merkle.KeyPath" json:"key_path"`
}

func (m *Path) Reset()         { *m = Path{} }
func (m *Path) String() string { return proto.CompactTextString(m) }
func (*Path) ProtoMessage()    {}
func (*Path) Descriptor() ([]byte, []int) {
	return fileDescriptor_43bdf3d6f35e5b7d, []int{6}
}
func (m *Path) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Path) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Path.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Path) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Path.Merge(m, src)
}
func (m *Path) XXX_Size() int {
	return m.Size()
}
func (m *Path) XXX_DiscardUnknown() {
	xxx_messageInfo_Path.DiscardUnknown(m)
}

var xxx_messageInfo_Path proto.InternalMessageInfo

func (m *Path) GetKeyPath() github_com_tendermint_tendermint_crypto_merkle.KeyPath {
	if m != nil {
		return m.KeyPath
	}
	return nil
}

type Proof struct {
	Proof *merkle.Proof `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *Proof) Reset()         { *m = Proof{} }
func (m *Proof) String() string { return proto.CompactTextString(m) }
func (*Proof) ProtoMessage()    {}
func (*Proof) Descriptor() ([]byte, []int) {
	return fileDescriptor_43bdf3d6f35e5b7d, []int{7}
}
func (m *Proof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Proof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Proof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Proof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proof.Merge(m, src)
}
func (m *Proof) XXX_Size() int {
	return m.Size()
}
func (m *Proof) XXX_DiscardUnknown() {
	xxx_messageInfo_Proof.DiscardUnknown(m)
}

var xxx_messageInfo_Proof proto.InternalMessageInfo

func (m *Proof) GetProof() *merkle.Proof {
	if m != nil {
		return m.Proof
	}
	return nil
}

func init() {
	proto.RegisterType((*RootI)(nil), "cosmos_sdk.x.ibc.commitment.v1.RootI")
	proto.RegisterType((*PrefixI)(nil), "cosmos_sdk.x.ibc.commitment.v1.PrefixI")
	proto.RegisterType((*PathI)(nil), "cosmos_sdk.x.ibc.commitment.v1.PathI")
	proto.RegisterType((*ProofI)(nil), "cosmos_sdk.x.ibc.commitment.v1.ProofI")
	proto.RegisterType((*Root)(nil), "cosmos_sdk.x.ibc.commitment.v1.Root")
	proto.RegisterType((*Prefix)(nil), "cosmos_sdk.x.ibc.commitment.v1.Prefix")
	proto.RegisterType((*Path)(nil), "cosmos_sdk.x.ibc.commitment.v1.Path")
	proto.RegisterType((*Proof)(nil), "cosmos_sdk.x.ibc.commitment.v1.Proof")
}

func init() { proto.RegisterFile("x/ibc/23-commitment/types.proto", fileDescriptor_43bdf3d6f35e5b7d) }

var fileDescriptor_43bdf3d6f35e5b7d = []byte{
	// 476 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0x4d, 0x6f, 0xd3, 0x30,
	0x1c, 0xc6, 0x63, 0xad, 0xed, 0xc0, 0xe3, 0x82, 0x4f, 0xa8, 0xd2, 0x52, 0x14, 0xc1, 0x98, 0x40,
	0xb1, 0xa1, 0x13, 0x8c, 0xd7, 0x82, 0x7a, 0xa2, 0x70, 0xa9, 0x72, 0xe4, 0x52, 0x35, 0x89, 0xdb,
	0x44, 0x21, 0x75, 0xe4, 0x78, 0x28, 0xb9, 0x71, 0x47, 0x42, 0xf0, 0x35, 0x38, 0xf7, 0x43, 0x4c,
	0x3d, 0xed, 0xc8, 0x09, 0x50, 0xfb, 0x45, 0x90, 0x5f, 0xa2, 0x46, 0x1b, 0x63, 0x5a, 0x77, 0xaa,
	0xad, 0x3e, 0x8f, 0xff, 0xbf, 0xe7, 0x89, 0x0d, 0x3b, 0x05, 0x89, 0xfd, 0x80, 0x74, 0x0f, 0xdc,
	0x80, 0xa5, 0x69, 0x2c, 0x52, 0x3a, 0x13, 0x44, 0x94, 0x19, 0xcd, 0x71, 0xc6, 0x99, 0x60, 0xc8,
	0x0e, 0x58, 0x9e, 0xb2, 0x7c, 0x94, 0x87, 0x09, 0x2e, 0x70, 0xec, 0x07, 0x78, 0x2d, 0xc4, 0x9f,
	0x1e, 0xb5, 0x1f, 0x88, 0x28, 0xe6, 0xe1, 0x28, 0x1b, 0x73, 0x51, 0x12, 0x65, 0x21, 0xda, 0xe1,
	0xd6, 0x37, 0xfa, 0xb0, 0xf6, 0xde, 0x59, 0xf1, 0x94, 0x4d, 0xd9, 0x7a, 0x65, 0x74, 0x87, 0x67,
	0x75, 0x82, 0xce, 0x42, 0xca, 0xd3, 0x78, 0x26, 0x48, 0xc0, 0xcb, 0x4c, 0x30, 0x92, 0x52, 0x9e,
	0x7c, 0xa4, 0xe6, 0xc7, 0x18, 0x6f, 0x2a, 0xf4, 0x7a, 0x00, 0xe7, 0x0b, 0x80, 0x4d, 0x8f, 0x31,
	0x31, 0x40, 0x3d, 0xd8, 0xd2, 0xe2, 0x5b, 0xe0, 0x36, 0xd8, 0xdf, 0xe9, 0xde, 0xc1, 0xff, 0xcf,
	0x86, 0xa5, 0xed, 0xad, 0xe5, 0x19, 0xd7, 0xf3, 0x17, 0x8b, 0xb9, 0x7b, 0x78, 0x7f, 0x1a, 0x8b,
	0xe8, 0xc8, 0x97, 0x4a, 0x93, 0xad, 0xca, 0x9b, 0x87, 0x09, 0xf9, 0x47, 0x9b, 0xea, 0x94, 0x41,
	0xbf, 0x09, 0xb7, 0xf2, 0xa3, 0xd4, 0xf9, 0x0e, 0xe0, 0xf6, 0x90, 0xd3, 0x49, 0x5c, 0x0c, 0xd0,
	0x9b, 0x53, 0x3c, 0x7b, 0x17, 0xf1, 0x68, 0x63, 0x8d, 0xe8, 0xd5, 0x62, 0xee, 0x3e, 0xbb, 0x3c,
	0x91, 0x01, 0xa8, 0x98, 0x64, 0x43, 0xc3, 0xb1, 0x88, 0x36, 0x68, 0x48, 0xda, 0xae, 0xde, 0x90,
	0x1a, 0x5e, 0xd1, 0x7c, 0x05, 0xb0, 0x35, 0xe4, 0x8c, 0x4d, 0x06, 0xe8, 0xf5, 0x29, 0x9c, 0xbb,
	0x17, 0x17, 0xc4, 0xd8, 0xa4, 0xc6, 0xf3, 0x72, 0x31, 0x77, 0x9f, 0x6e, 0xd2, 0x8f, 0x1c, 0x5f,
	0x01, 0xb5, 0x61, 0x43, 0x7e, 0x42, 0x84, 0x60, 0x23, 0x1a, 0xe7, 0x91, 0x62, 0xb9, 0xe1, 0xa9,
	0xb5, 0x73, 0x4f, 0xb2, 0xca, 0x32, 0xd1, 0x2e, 0x84, 0x09, 0x2d, 0x47, 0x99, 0xda, 0x19, 0xcd,
	0xf5, 0x84, 0x96, 0xfa, 0x6f, 0xe7, 0x33, 0x80, 0x0d, 0x19, 0x13, 0x15, 0xf0, 0x9a, 0xd2, 0x8d,
	0x85, 0x3c, 0x69, 0x6b, 0x7f, 0xa7, 0xbb, 0x8b, 0xd7, 0x77, 0x1b, 0xeb, 0xbb, 0x8d, 0xcd, 0xa5,
	0x7e, 0x4f, 0xcb, 0x7e, 0xef, 0xf8, 0x57, 0xc7, 0xfa, 0xf1, 0xbb, 0xf3, 0xa4, 0x16, 0xa3, 0xf6,
	0x18, 0xce, 0x7b, 0x17, 0xd2, 0x2b, 0x07, 0x7a, 0xdb, 0x89, 0x5e, 0x38, 0x3d, 0xd8, 0x54, 0xc1,
	0xd0, 0x63, 0xd8, 0xcc, 0xe4, 0xc2, 0xb4, 0xda, 0x39, 0x7f, 0xbe, 0xd2, 0x7b, 0x5a, 0xdd, 0x7f,
	0x77, 0xbc, 0xb4, 0xc1, 0xc9, 0xd2, 0x06, 0x7f, 0x96, 0x36, 0xf8, 0xb6, 0xb2, 0xad, 0x93, 0x95,
	0x6d, 0xfd, 0x5c, 0xd9, 0xd6, 0x87, 0x87, 0x97, 0x6d, 0xd8, 0x6f, 0xa9, 0xb7, 0x79, 0xf0, 0x37,
	0x00, 0x00, 0xff, 0xff, 0x24, 0x84, 0xcc, 0xb7, 0x7f, 0x04, 0x00, 0x00,
}

func (this *RootI) GetRootI() github_com_cosmos_cosmos_sdk_x_ibc_23_commitment.RootI {
	if x := this.GetMerkle(); x != nil {
		return x
	}
	return nil
}

func (this *RootI) SetRootI(value github_com_cosmos_cosmos_sdk_x_ibc_23_commitment.RootI) error {
	if value == nil {
		this.Sum = nil
		return nil
	}
	switch vt := value.(type) {
	case *Root:
		this.Sum = &RootI_Merkle{vt}
		return nil
	}
	return fmt.Errorf("can't encode value of type %T as message RootI", value)
}

func (this *PrefixI) GetPrefixI() github_com_cosmos_cosmos_sdk_x_ibc_23_commitment.PrefixI {
	if x := this.GetMerkle(); x != nil {
		return x
	}
	return nil
}

func (this *PrefixI) SetPrefixI(value github_com_cosmos_cosmos_sdk_x_ibc_23_commitment.PrefixI) error {
	if value == nil {
		this.Sum = nil
		return nil
	}
	switch vt := value.(type) {
	case *Prefix:
		this.Sum = &PrefixI_Merkle{vt}
		return nil
	}
	return fmt.Errorf("can't encode value of type %T as message PrefixI", value)
}

func (this *PathI) GetPathI() github_com_cosmos_cosmos_sdk_x_ibc_23_commitment.PathI {
	if x := this.GetMerkle(); x != nil {
		return x
	}
	return nil
}

func (this *PathI) SetPathI(value github_com_cosmos_cosmos_sdk_x_ibc_23_commitment.PathI) error {
	if value == nil {
		this.Sum = nil
		return nil
	}
	switch vt := value.(type) {
	case *Path:
		this.Sum = &PathI_Merkle{vt}
		return nil
	}
	return fmt.Errorf("can't encode value of type %T as message PathI", value)
}

func (this *ProofI) GetProofI() github_com_cosmos_cosmos_sdk_x_ibc_23_commitment.ProofI {
	if x := this.GetMerkle(); x != nil {
		return x
	}
	return nil
}

func (this *ProofI) SetProofI(value github_com_cosmos_cosmos_sdk_x_ibc_23_commitment.ProofI) error {
	if value == nil {
		this.Sum = nil
		return nil
	}
	switch vt := value.(type) {
	case *Proof:
		this.Sum = &ProofI_Merkle{vt}
		return nil
	}
	return fmt.Errorf("can't encode value of type %T as message ProofI", value)
}

func (m *RootI) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RootI) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RootI) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sum != nil {
		{
			size := m.Sum.Size()
			i -= size
			if _, err := m.Sum.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *RootI_Merkle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RootI_Merkle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Merkle != nil {
		{
			size, err := m.Merkle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *PrefixI) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrefixI) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrefixI) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sum != nil {
		{
			size := m.Sum.Size()
			i -= size
			if _, err := m.Sum.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *PrefixI_Merkle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrefixI_Merkle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Merkle != nil {
		{
			size, err := m.Merkle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *PathI) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PathI) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PathI) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sum != nil {
		{
			size := m.Sum.Size()
			i -= size
			if _, err := m.Sum.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *PathI_Merkle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PathI_Merkle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Merkle != nil {
		{
			size, err := m.Merkle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ProofI) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProofI) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProofI) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sum != nil {
		{
			size := m.Sum.Size()
			i -= size
			if _, err := m.Sum.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ProofI_Merkle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProofI_Merkle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Merkle != nil {
		{
			size, err := m.Merkle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Root) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Root) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Root) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Prefix) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Prefix) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Prefix) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.KeyPrefix) > 0 {
		i -= len(m.KeyPrefix)
		copy(dAtA[i:], m.KeyPrefix)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.KeyPrefix)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Path) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Path) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Path) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.KeyPath) > 0 {
		for iNdEx := len(m.KeyPath) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeyPath[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Proof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Proof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Proof != nil {
		{
			size, err := m.Proof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RootI) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sum != nil {
		n += m.Sum.Size()
	}
	return n
}

func (m *RootI_Merkle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Merkle != nil {
		l = m.Merkle.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PrefixI) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sum != nil {
		n += m.Sum.Size()
	}
	return n
}

func (m *PrefixI_Merkle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Merkle != nil {
		l = m.Merkle.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PathI) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sum != nil {
		n += m.Sum.Size()
	}
	return n
}

func (m *PathI_Merkle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Merkle != nil {
		l = m.Merkle.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ProofI) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sum != nil {
		n += m.Sum.Size()
	}
	return n
}

func (m *ProofI_Merkle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Merkle != nil {
		l = m.Merkle.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Root) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Prefix) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.KeyPrefix)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Path) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.KeyPath) > 0 {
		for _, e := range m.KeyPath {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *Proof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Proof != nil {
		l = m.Proof.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RootI) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RootI: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RootI: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Merkle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Root{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &RootI_Merkle{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrefixI) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrefixI: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrefixI: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Merkle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Prefix{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &PrefixI_Merkle{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PathI) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PathI: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PathI: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Merkle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Path{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &PathI_Merkle{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProofI) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProofI: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProofI: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Merkle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Proof{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &ProofI_Merkle{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Root) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Root: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Root: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Prefix) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Prefix: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Prefix: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyPrefix", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyPrefix = append(m.KeyPrefix[:0], dAtA[iNdEx:postIndex]...)
			if m.KeyPrefix == nil {
				m.KeyPrefix = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Path) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Path: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Path: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyPath", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyPath = append(m.KeyPath, merkle.Key{})
			if err := m.KeyPath[len(m.KeyPath)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Proof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Proof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Proof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proof == nil {
				m.Proof = &merkle.Proof{}
			}
			if err := m.Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
