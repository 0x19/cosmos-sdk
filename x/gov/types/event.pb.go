// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/gov/v1beta1/event.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventInactiveProposal is a typed event for inactive proposal
type EventInactiveProposal struct {
	ProposalId     uint64 `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty" yaml:"proposal_id"`
	ProposalResult string `protobuf:"bytes,2,opt,name=proposal_result,json=proposalResult,proto3" json:"proposal_result,omitempty" yaml:"proposal_result"`
}

func (m *EventInactiveProposal) Reset()         { *m = EventInactiveProposal{} }
func (m *EventInactiveProposal) String() string { return proto.CompactTextString(m) }
func (*EventInactiveProposal) ProtoMessage()    {}
func (*EventInactiveProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_740921db52c74023, []int{0}
}
func (m *EventInactiveProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventInactiveProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventInactiveProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventInactiveProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventInactiveProposal.Merge(m, src)
}
func (m *EventInactiveProposal) XXX_Size() int {
	return m.Size()
}
func (m *EventInactiveProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_EventInactiveProposal.DiscardUnknown(m)
}

var xxx_messageInfo_EventInactiveProposal proto.InternalMessageInfo

func (m *EventInactiveProposal) GetProposalId() uint64 {
	if m != nil {
		return m.ProposalId
	}
	return 0
}

func (m *EventInactiveProposal) GetProposalResult() string {
	if m != nil {
		return m.ProposalResult
	}
	return ""
}

// EventActiveProposal is a typed event for active proposal
type EventActiveProposal struct {
	ProposalId     uint64 `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty" yaml:"proposal_id"`
	ProposalResult string `protobuf:"bytes,2,opt,name=proposal_result,json=proposalResult,proto3" json:"proposal_result,omitempty" yaml:"proposal_result"`
}

func (m *EventActiveProposal) Reset()         { *m = EventActiveProposal{} }
func (m *EventActiveProposal) String() string { return proto.CompactTextString(m) }
func (*EventActiveProposal) ProtoMessage()    {}
func (*EventActiveProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_740921db52c74023, []int{1}
}
func (m *EventActiveProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventActiveProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventActiveProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventActiveProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventActiveProposal.Merge(m, src)
}
func (m *EventActiveProposal) XXX_Size() int {
	return m.Size()
}
func (m *EventActiveProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_EventActiveProposal.DiscardUnknown(m)
}

var xxx_messageInfo_EventActiveProposal proto.InternalMessageInfo

func (m *EventActiveProposal) GetProposalId() uint64 {
	if m != nil {
		return m.ProposalId
	}
	return 0
}

func (m *EventActiveProposal) GetProposalResult() string {
	if m != nil {
		return m.ProposalResult
	}
	return ""
}

// EventProposalDeposit is a typed event for proposal deposit
type EventProposalDeposit struct {
	ProposalId uint64                                   `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty" yaml:"proposal_id"`
	Amount     github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *EventProposalDeposit) Reset()         { *m = EventProposalDeposit{} }
func (m *EventProposalDeposit) String() string { return proto.CompactTextString(m) }
func (*EventProposalDeposit) ProtoMessage()    {}
func (*EventProposalDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_740921db52c74023, []int{2}
}
func (m *EventProposalDeposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventProposalDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventProposalDeposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventProposalDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventProposalDeposit.Merge(m, src)
}
func (m *EventProposalDeposit) XXX_Size() int {
	return m.Size()
}
func (m *EventProposalDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_EventProposalDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_EventProposalDeposit proto.InternalMessageInfo

func (m *EventProposalDeposit) GetProposalId() uint64 {
	if m != nil {
		return m.ProposalId
	}
	return 0
}

func (m *EventProposalDeposit) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

// EventSubmitProposal is a typed event emitted when proposal is submitted
type EventSubmitProposal struct {
	ProposalId   uint64 `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty" yaml:"proposal_id"`
	ProposalType string `protobuf:"bytes,2,opt,name=proposal_type,json=proposalType,proto3" json:"proposal_type,omitempty" yaml:"proposal_type"`
}

func (m *EventSubmitProposal) Reset()         { *m = EventSubmitProposal{} }
func (m *EventSubmitProposal) String() string { return proto.CompactTextString(m) }
func (*EventSubmitProposal) ProtoMessage()    {}
func (*EventSubmitProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_740921db52c74023, []int{3}
}
func (m *EventSubmitProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSubmitProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSubmitProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSubmitProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSubmitProposal.Merge(m, src)
}
func (m *EventSubmitProposal) XXX_Size() int {
	return m.Size()
}
func (m *EventSubmitProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSubmitProposal.DiscardUnknown(m)
}

var xxx_messageInfo_EventSubmitProposal proto.InternalMessageInfo

func (m *EventSubmitProposal) GetProposalId() uint64 {
	if m != nil {
		return m.ProposalId
	}
	return 0
}

func (m *EventSubmitProposal) GetProposalType() string {
	if m != nil {
		return m.ProposalType
	}
	return ""
}

// EventVotingPeriodStarted is a typed event emitted when voting period started
type EventVotingPeriodStarted struct {
	ProposalId uint64 `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty" yaml:"proposal_id"`
}

func (m *EventVotingPeriodStarted) Reset()         { *m = EventVotingPeriodStarted{} }
func (m *EventVotingPeriodStarted) String() string { return proto.CompactTextString(m) }
func (*EventVotingPeriodStarted) ProtoMessage()    {}
func (*EventVotingPeriodStarted) Descriptor() ([]byte, []int) {
	return fileDescriptor_740921db52c74023, []int{4}
}
func (m *EventVotingPeriodStarted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventVotingPeriodStarted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventVotingPeriodStarted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventVotingPeriodStarted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventVotingPeriodStarted.Merge(m, src)
}
func (m *EventVotingPeriodStarted) XXX_Size() int {
	return m.Size()
}
func (m *EventVotingPeriodStarted) XXX_DiscardUnknown() {
	xxx_messageInfo_EventVotingPeriodStarted.DiscardUnknown(m)
}

var xxx_messageInfo_EventVotingPeriodStarted proto.InternalMessageInfo

func (m *EventVotingPeriodStarted) GetProposalId() uint64 {
	if m != nil {
		return m.ProposalId
	}
	return 0
}

// EventVoteProposal is a typed event emitted when voted to proposal
type EventVoteProposal struct {
	ProposalId uint64 `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty" yaml:"proposal_id"`
	Option     string `protobuf:"bytes,2,opt,name=option,proto3" json:"option,omitempty"`
}

func (m *EventVoteProposal) Reset()         { *m = EventVoteProposal{} }
func (m *EventVoteProposal) String() string { return proto.CompactTextString(m) }
func (*EventVoteProposal) ProtoMessage()    {}
func (*EventVoteProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_740921db52c74023, []int{5}
}
func (m *EventVoteProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventVoteProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventVoteProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventVoteProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventVoteProposal.Merge(m, src)
}
func (m *EventVoteProposal) XXX_Size() int {
	return m.Size()
}
func (m *EventVoteProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_EventVoteProposal.DiscardUnknown(m)
}

var xxx_messageInfo_EventVoteProposal proto.InternalMessageInfo

func (m *EventVoteProposal) GetProposalId() uint64 {
	if m != nil {
		return m.ProposalId
	}
	return 0
}

func (m *EventVoteProposal) GetOption() string {
	if m != nil {
		return m.Option
	}
	return ""
}

func init() {
	proto.RegisterType((*EventInactiveProposal)(nil), "cosmos.gov.v1beta1.EventInactiveProposal")
	proto.RegisterType((*EventActiveProposal)(nil), "cosmos.gov.v1beta1.EventActiveProposal")
	proto.RegisterType((*EventProposalDeposit)(nil), "cosmos.gov.v1beta1.EventProposalDeposit")
	proto.RegisterType((*EventSubmitProposal)(nil), "cosmos.gov.v1beta1.EventSubmitProposal")
	proto.RegisterType((*EventVotingPeriodStarted)(nil), "cosmos.gov.v1beta1.EventVotingPeriodStarted")
	proto.RegisterType((*EventVoteProposal)(nil), "cosmos.gov.v1beta1.EventVoteProposal")
}

func init() { proto.RegisterFile("cosmos/gov/v1beta1/event.proto", fileDescriptor_740921db52c74023) }

var fileDescriptor_740921db52c74023 = []byte{
	// 421 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x93, 0x3f, 0x6f, 0x9b, 0x40,
	0x18, 0xc6, 0xb9, 0xb6, 0xb2, 0xd4, 0x73, 0xff, 0xa8, 0xd4, 0xb5, 0xa8, 0x07, 0xb0, 0x98, 0x58,
	0x0a, 0x75, 0x3b, 0x54, 0xaa, 0xd4, 0xa1, 0xb8, 0x1d, 0xbc, 0x59, 0xb8, 0xea, 0xd0, 0xa5, 0xe2,
	0xcf, 0x89, 0x9e, 0x6a, 0x78, 0x11, 0x77, 0xa0, 0xf8, 0x43, 0x44, 0x8a, 0x14, 0xe5, 0x4b, 0x64,
	0xce, 0x87, 0xf0, 0xe8, 0x31, 0x13, 0x89, 0xec, 0x6f, 0xe0, 0x4f, 0x10, 0x71, 0x70, 0x56, 0xe4,
	0x21, 0x83, 0x93, 0x21, 0x13, 0xf7, 0xde, 0x73, 0xef, 0xc3, 0x8f, 0xf7, 0xe1, 0xb0, 0x1e, 0x02,
	0x4b, 0x80, 0x39, 0x31, 0x94, 0x4e, 0x39, 0x0a, 0x08, 0xf7, 0x47, 0x0e, 0x29, 0x49, 0xca, 0xed,
	0x2c, 0x07, 0x0e, 0xaa, 0xda, 0xe8, 0x76, 0x0c, 0xa5, 0xdd, 0xea, 0x83, 0x5e, 0x0c, 0x31, 0x08,
	0xd9, 0xa9, 0x57, 0xcd, 0xc9, 0x81, 0x74, 0x0a, 0x7c, 0x46, 0x76, 0x56, 0x21, 0xd0, 0xb4, 0xd1,
	0xcd, 0x33, 0x84, 0xdf, 0xfd, 0xac, 0x9d, 0x27, 0xa9, 0x1f, 0x72, 0x5a, 0x92, 0x69, 0x0e, 0x19,
	0x30, 0x7f, 0xae, 0x7e, 0xc1, 0xdd, 0xac, 0x5d, 0xff, 0xa5, 0x91, 0x86, 0x86, 0xc8, 0x7a, 0xe6,
	0xf6, 0xb7, 0x95, 0xa1, 0x2e, 0xfc, 0x64, 0xfe, 0xd5, 0xbc, 0x25, 0x9a, 0x1e, 0x96, 0xd5, 0x24,
	0x52, 0xc7, 0xf8, 0xf5, 0x4e, 0xcb, 0x09, 0x2b, 0xe6, 0x5c, 0x7b, 0x32, 0x44, 0xd6, 0x73, 0x77,
	0xb0, 0xad, 0x8c, 0xfe, 0x5e, 0x73, 0x73, 0xc0, 0xf4, 0x5e, 0xc9, 0x1d, 0xaf, 0xd9, 0x38, 0x45,
	0xf8, 0xad, 0xe0, 0xfa, 0xfe, 0x98, 0xa8, 0x2e, 0x10, 0xee, 0x09, 0x2a, 0xc9, 0xf3, 0x83, 0x64,
	0xc0, 0x28, 0x3f, 0x1c, 0x2b, 0xc4, 0x1d, 0x3f, 0x81, 0x22, 0xad, 0x69, 0x9e, 0x5a, 0xdd, 0x4f,
	0xef, 0xed, 0x36, 0xda, 0x3a, 0x30, 0x99, 0xad, 0x3d, 0x06, 0x9a, 0xba, 0x1f, 0x97, 0x95, 0xa1,
	0x9c, 0x5f, 0x19, 0x56, 0x4c, 0xf9, 0xbf, 0x22, 0xb0, 0x43, 0x48, 0x9c, 0x36, 0xdd, 0xe6, 0xf1,
	0x81, 0x45, 0xff, 0x1d, 0xbe, 0xc8, 0x08, 0x13, 0x0d, 0xcc, 0x6b, 0xad, 0xcd, 0x63, 0x39, 0xcc,
	0x59, 0x11, 0x24, 0x94, 0xdf, 0x7f, 0x98, 0xdf, 0xf0, 0xcb, 0x9d, 0x56, 0xbf, 0xb0, 0x1d, 0xa5,
	0xb6, 0xad, 0x8c, 0xde, 0x5e, 0x6b, 0x2d, 0x9b, 0xde, 0x0b, 0x59, 0xff, 0xaa, 0xcb, 0x19, 0xd6,
	0x04, 0xce, 0x6f, 0xe0, 0x34, 0x8d, 0xa7, 0x24, 0xa7, 0x10, 0xcd, 0xb8, 0x9f, 0x73, 0x12, 0x1d,
	0xcc, 0x64, 0x46, 0xf8, 0x8d, 0x34, 0x7d, 0x80, 0xdf, 0xa5, 0x8f, 0x3b, 0x90, 0x71, 0x0a, 0x69,
	0xf3, 0x69, 0x5e, 0x5b, 0xb9, 0xee, 0x72, 0xad, 0xa3, 0xd5, 0x5a, 0x47, 0xd7, 0x6b, 0x1d, 0x9d,
	0x6c, 0x74, 0x65, 0xb5, 0xd1, 0x95, 0xcb, 0x8d, 0xae, 0xfc, 0xb9, 0x3b, 0x96, 0x23, 0x71, 0x97,
	0x45, 0x38, 0x41, 0x47, 0x5c, 0xbd, 0xcf, 0x37, 0x01, 0x00, 0x00, 0xff, 0xff, 0xae, 0x2e, 0xca,
	0x8d, 0xe6, 0x03, 0x00, 0x00,
}

func (m *EventInactiveProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventInactiveProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventInactiveProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProposalResult) > 0 {
		i -= len(m.ProposalResult)
		copy(dAtA[i:], m.ProposalResult)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ProposalResult)))
		i--
		dAtA[i] = 0x12
	}
	if m.ProposalId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ProposalId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventActiveProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventActiveProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventActiveProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProposalResult) > 0 {
		i -= len(m.ProposalResult)
		copy(dAtA[i:], m.ProposalResult)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ProposalResult)))
		i--
		dAtA[i] = 0x12
	}
	if m.ProposalId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ProposalId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventProposalDeposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventProposalDeposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventProposalDeposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ProposalId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ProposalId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventSubmitProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSubmitProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSubmitProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProposalType) > 0 {
		i -= len(m.ProposalType)
		copy(dAtA[i:], m.ProposalType)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ProposalType)))
		i--
		dAtA[i] = 0x12
	}
	if m.ProposalId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ProposalId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventVotingPeriodStarted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventVotingPeriodStarted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventVotingPeriodStarted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProposalId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ProposalId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventVoteProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventVoteProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventVoteProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Option) > 0 {
		i -= len(m.Option)
		copy(dAtA[i:], m.Option)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Option)))
		i--
		dAtA[i] = 0x12
	}
	if m.ProposalId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ProposalId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventInactiveProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalId != 0 {
		n += 1 + sovEvent(uint64(m.ProposalId))
	}
	l = len(m.ProposalResult)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventActiveProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalId != 0 {
		n += 1 + sovEvent(uint64(m.ProposalId))
	}
	l = len(m.ProposalResult)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventProposalDeposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalId != 0 {
		n += 1 + sovEvent(uint64(m.ProposalId))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	return n
}

func (m *EventSubmitProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalId != 0 {
		n += 1 + sovEvent(uint64(m.ProposalId))
	}
	l = len(m.ProposalType)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventVotingPeriodStarted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalId != 0 {
		n += 1 + sovEvent(uint64(m.ProposalId))
	}
	return n
}

func (m *EventVoteProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalId != 0 {
		n += 1 + sovEvent(uint64(m.ProposalId))
	}
	l = len(m.Option)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventInactiveProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventInactiveProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventInactiveProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			m.ProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalResult", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposalResult = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventActiveProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventActiveProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventActiveProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			m.ProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalResult", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposalResult = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventProposalDeposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventProposalDeposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventProposalDeposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			m.ProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSubmitProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSubmitProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSubmitProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			m.ProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposalType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventVotingPeriodStarted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventVotingPeriodStarted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventVotingPeriodStarted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			m.ProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventVoteProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventVoteProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventVoteProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			m.ProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Option", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Option = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
