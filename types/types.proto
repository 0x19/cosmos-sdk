syntax = "proto3";
package cosmos_sdk.v1;

import "third_party/proto/gogoproto/gogo.proto";
import "third_party/proto/tendermint/abci/types/types.proto";
import "google/protobuf/any.proto";

option go_package                       = "github.com/cosmos/cosmos-sdk/types";
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all)         = false;

// Coin defines a token with a denomination and an amount.
//
// NOTE: The amount field is an Int which implements the custom method
// signatures required by gogoproto.
message Coin {
  option (gogoproto.equal) = true;

  string denom  = 1;
  string amount = 2 [(gogoproto.customtype) = "Int", (gogoproto.nullable) = false];
}

// DecCoin defines a token with a denomination and a decimal amount.
//
// NOTE: The amount field is an Dec which implements the custom method
// signatures required by gogoproto.
message DecCoin {
  option (gogoproto.equal) = true;

  string denom  = 1;
  string amount = 2 [(gogoproto.customtype) = "Dec", (gogoproto.nullable) = false];
}

// IntProto defines a Protobuf wrapper around an Int object.
message IntProto {
  string int = 1 [(gogoproto.customtype) = "Int", (gogoproto.nullable) = false];
}

// DecProto defines a Protobuf wrapper around a Dec object.
message DecProto {
  string dec = 1 [(gogoproto.customtype) = "Dec", (gogoproto.nullable) = false];
}

// ValAddresses defines a repeated set of validator addresses.
message ValAddresses {
  option (gogoproto.stringer) = true;

  repeated bytes addresses = 1 [(gogoproto.casttype) = "ValAddress"];
}

// GasInfo defines tx execution gas context.
message GasInfo {
  // GasWanted is the maximum units of work we allow this tx to perform.
  uint64 gas_wanted = 1 [(gogoproto.moretags) = "yaml:\"gas_wanted\""];

  // GasUsed is the amount of gas actually consumed.
  uint64 gas_used = 2 [(gogoproto.moretags) = "yaml:\"gas_used\""];
}

// Result is the union of ResponseFormat and ResponseCheckTx.
message Result {
  option (gogoproto.goproto_getters) = false;

  // Data is any data returned from message or handler execution. It MUST be length
  // prefixed in order to separate data from multiple message executions.
  bytes data = 1;

  // Log contains the log information from message or handler execution.
  string log = 2;

  // Events contains a slice of Event objects that were emitted during message or
  // handler execution.
  repeated tendermint.abci.types.Event events = 3 [(gogoproto.nullable) = false];
}

// SimulationResponse defines the response generated when a transaction is
// successfully simulated.
message SimulationResponse {
  GasInfo gas_info = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
  Result  result   = 2;
}

// StdSignDoc defines a standard application-level signing document to compose
// signatures for a Transaction.
message StdSignDoc {
    repeated google.protobuf.Any msgs = 1;
    string chain_id = 2 [(gogoproto.customname) = "ChainID", (gogoproto.moretags) = "yaml:\"chain_id\""];
    uint64 account_number = 3 [(gogoproto.moretags) = "yaml:\"account_number\""];
    uint64 sequence = 4;
    string memo = 5;
    StdFee fee = 6;
}

// StdFee includes the amount of coins paid in fees and the maximum
// gas to be used by the transaction. The ratio yields an effective "gasprice",
// which must be above some miminum to be accepted into the mempool.
message StdFee {
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.equal) = true;

  repeated cosmos_sdk.v1.Coin amount = 1 [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  uint64 gas = 2;
}

// StdSignature defines a signature structure that contains the signature of a
// transaction and an optional public key.
message StdSignature {
  option (gogoproto.goproto_getters) = false;

  bytes pub_key = 1 [(gogoproto.jsontag) = "public_key,omitempty", (gogoproto.moretags) = "yaml:\"public_key\""];
  bytes signature = 2;
}

// StdTxBase defines a transaction base which application-level concrete transaction
// types can extend.
message StdTxBase {
  StdFee fee = 1 [(gogoproto.nullable) = false];
  repeated StdSignature signatures = 2 [(gogoproto.nullable) = false];
  string memo = 3;
}

message AnyTransaction {
    StdTxBase base = 1;
    repeated google.protobuf.Any msgs = 2;
}

service TxService {
    rpc QueryTx (QueryTxRequest) returns (QueryTxResponse);

    rpc GenerateTx (GenerateTxRequest) returns (GenerateTxResponse);

    // GetAppMessages converts the provided messages into the app-specific version
    // if they differ (because of interface encoding) or returns an error
    rpc GetAppMessages (GetAppMessagesRequest) returns (GetAppMessagesResponse);

    // BuildAppTransaction converts AnyTransaction into an app-specific
    // transaction that can be broadcast
    rpc BuildAppTx (AnyTransaction) returns (google.protobuf.Any);

    rpc BroadcastTx (BroadcastTxRequest) returns (BroadcastTxResponse);
}

message GetAppMessagesRequest {
    repeated google.protobuf.Any msgs = 1;
}

message GetAppMessagesResponse {
    repeated google.protobuf.Any msgs = 1;
}

message BroadcastTxRequest {
    google.protobuf.Any app_tx = 1;
    BroadcastTxMode mode = 2;
}

enum BroadcastTxMode {
    BLOCK = 0;
    SYNC = 1;
    ASYNC = 2;
}

message BroadcastTxResponse {

}

message QueryTxRequest {
    string tx_hash = 1;
    string message_action = 2;
    string message_sender = 3;
    int64 min_height = 4;
    int64 max_height = 5;
    uint64 page = 6;
    uint64 limit = 7;
}

message QueryTxResponse {
    uint64 total_count = 1;
    uint64 count = 2;
    uint64 page_number = 3;
    uint64 page_total = 4;
    uint64 limit = 5;
    repeated AnyTransaction txs = 6;
}

message GenerateTxRequest {
    bytes from = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    string memo = 2;
    string chain_id = 3;
    uint64 account_number = 4;
    uint64 sequence = 5;
    repeated cosmos_sdk.v1.Coin fees = 6 [(gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (gogoproto.nullable) = false];
    repeated cosmos_sdk.v1.DecCoin gas_prices = 7 [(gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins", (gogoproto.nullable) = false];
    string gas = 8;
    string gas_adjustment = 9;
    bool simulate = 10;
    repeated google.protobuf.Any msgs = 11;
}

message GenerateTxResponse {
    AnyTransaction unsigned_tx = 1;
}
